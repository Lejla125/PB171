

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Mar 29 14:37:43 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F44K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,inline
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,inline
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,inline
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,inline
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    32  0000                     
    33                           ; Version 2.20
    34                           ; Generated 05/05/2020 GMT
    35                           ; 
    36                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F44K22 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	smallconst
    69  000300                     __psmallconst:
    70                           	callstack 0
    71  000300  00                 	db	0
    72  000301                     STR_1:
    73  000301  25                 	db	37
    74  000302  64                 	db	100	;'d'
    75  000303  0A                 	db	10
    76  000304  00                 	db	0
    77  000305                     STR_3:
    78  000305  25                 	db	37
    79  000306  64                 	db	100	;'d'
    80  000307  00                 	db	0
    81  000308  00                 	db	0	; dummy byte at the end
    82  0000                     
    83                           ; #config settings
    84                           
    85                           	psect	cinit
    86  000E04                     __pcinit:
    87                           	callstack 0
    88  000E04                     start_initialization:
    89                           	callstack 0
    90  000E04                     __initialization:
    91                           	callstack 0
    92                           
    93                           ; Clear objects allocated to BANK0 (40 bytes)
    94  000E04  EE00  F060         	lfsr	0,__pbssBANK0
    95  000E08  0E28               	movlw	40
    96  000E0A                     clear_0:
    97  000E0A  6AEE               	clrf	postinc0,c
    98  000E0C  06E8               	decf	wreg,f,c
    99  000E0E  E1FD               	bnz	clear_0
   100  000E10                     end_of_initialization:
   101                           	callstack 0
   102  000E10                     __end_of__initialization:
   103                           	callstack 0
   104  000E10  0E00               	movlw	low (__Lsmallconst shr (0+16))
   105  000E12  6EF8               	movwf	tblptru,c
   106  000E14  0E03               	movlw	high __Lsmallconst
   107  000E16  6EF7               	movwf	tblptrh,c
   108  000E18  0100               	movlb	0
   109  000E1A  EFF4  F005         	goto	_main	;jump to C main() function
   110                           
   111                           	psect	bssBANK0
   112  000060                     __pbssBANK0:
   113                           	callstack 0
   114  000060                     _nout:
   115                           	callstack 0
   116  000060                     	ds	2
   117  000062                     _width:
   118                           	callstack 0
   119  000062                     	ds	2
   120  000064                     _prec:
   121                           	callstack 0
   122  000064                     	ds	2
   123  000066                     _flags:
   124                           	callstack 0
   125  000066                     	ds	2
   126  000068                     _dbuf:
   127                           	callstack 0
   128  000068                     	ds	32
   129                           
   130                           	psect	cstackBANK0
   131  000088                     __pcstackBANK0:
   132                           	callstack 0
   133  000088                     
   134                           ; 2 bytes @ 0x0
   135  000088                     	ds	2
   136  00008A                     
   137                           ; 3 bytes @ 0x2
   138  00008A                     	ds	3
   139                           
   140                           	psect	cstackCOMRAM
   141  000001                     __pcstackCOMRAM:
   142                           	callstack 0
   143  000001                     ??_bitValue:
   144  000001                     ?_strlen:
   145                           	callstack 0
   146  000001                     ?___aodiv:
   147                           	callstack 0
   148  000001                     ?___aomod:
   149                           	callstack 0
   150  000001                     bitRead@b:
   151                           	callstack 0
   152  000001                     fputc@c:
   153                           	callstack 0
   154  000001                     strlen@s:
   155                           	callstack 0
   156  000001                     ___aodiv@dividend:
   157                           	callstack 0
   158  000001                     ___aomod@dividend:
   159                           	callstack 0
   160                           
   161                           ; 8 bytes @ 0x0
   162  000001                     	ds	1
   163  000002                     ??_bitRead:
   164                           
   165                           ; 1 bytes @ 0x1
   166  000002                     	ds	1
   167  000003                     bitValue@b:
   168                           	callstack 0
   169  000003                     fputc@fp:
   170                           	callstack 0
   171  000003                     strlen@a:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x2
   175  000003                     	ds	1
   176  000004                     bitRead@number:
   177                           	callstack 0
   178  000004                     bitClear@number:
   179                           	callstack 0
   180  000004                     bitSet@number:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x3
   184  000004                     	ds	1
   185  000005                     ??_fputc:
   186                           
   187                           ; 1 bytes @ 0x4
   188  000005                     	ds	1
   189  000006                     bitClear@b:
   190                           	callstack 0
   191  000006                     bitSet@b:
   192                           	callstack 0
   193                           
   194                           ; 1 bytes @ 0x5
   195  000006                     	ds	1
   196  000007                     ??_bitClear:
   197  000007                     ??_bitSet:
   198                           
   199                           ; 1 bytes @ 0x6
   200  000007                     	ds	1
   201  000008                     bitWrite@number:
   202                           	callstack 0
   203                           
   204                           ; 2 bytes @ 0x7
   205  000008                     	ds	1
   206  000009                     ___aodiv@divisor:
   207                           	callstack 0
   208  000009                     ___aomod@divisor:
   209                           	callstack 0
   210                           
   211                           ; 8 bytes @ 0x8
   212  000009                     	ds	1
   213  00000A                     bitWrite@b:
   214                           	callstack 0
   215  00000A                     fputs@s:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0x9
   219  00000A                     	ds	1
   220  00000B                     bitWrite@val:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0xA
   224  00000B                     	ds	1
   225  00000C                     fputs@fp:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0xB
   229  00000C                     	ds	2
   230  00000E                     fputs@c:
   231                           	callstack 0
   232                           
   233                           ; 1 bytes @ 0xD
   234  00000E                     	ds	1
   235  00000F                     fputs@i:
   236                           	callstack 0
   237                           
   238                           ; 2 bytes @ 0xE
   239  00000F                     	ds	2
   240  000011                     ?_pad:
   241                           	callstack 0
   242  000011                     ___aodiv@counter:
   243                           	callstack 0
   244  000011                     ___aomod@counter:
   245                           	callstack 0
   246  000011                     pad@fp:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0x10
   250  000011                     	ds	1
   251  000012                     ___aodiv@sign:
   252                           	callstack 0
   253  000012                     ___aomod@sign:
   254                           	callstack 0
   255                           
   256                           ; 1 bytes @ 0x11
   257  000012                     	ds	1
   258  000013                     ?_abs:
   259                           	callstack 0
   260  000013                     pad@buf:
   261                           	callstack 0
   262  000013                     abs@a:
   263                           	callstack 0
   264  000013                     ___aodiv@quotient:
   265                           	callstack 0
   266                           
   267                           ; 8 bytes @ 0x12
   268  000013                     	ds	2
   269  000015                     ??_abs:
   270  000015                     pad@p:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x14
   274  000015                     	ds	2
   275  000017                     ??_pad:
   276                           
   277                           ; 1 bytes @ 0x16
   278  000017                     	ds	1
   279  000018                     pad@i:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0x17
   283  000018                     	ds	2
   284  00001A                     pad@w:
   285                           	callstack 0
   286                           
   287                           ; 2 bytes @ 0x19
   288  00001A                     	ds	2
   289  00001C                     ?_dtoa:
   290                           	callstack 0
   291  00001C                     dtoa@fp:
   292                           	callstack 0
   293                           
   294                           ; 2 bytes @ 0x1B
   295  00001C                     	ds	2
   296  00001E                     dtoa@d:
   297                           	callstack 0
   298                           
   299                           ; 8 bytes @ 0x1D
   300  00001E                     	ds	8
   301  000026                     ??_dtoa:
   302                           
   303                           ; 1 bytes @ 0x25
   304  000026                     	ds	8
   305  00002E                     _dtoa$582:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0x2D
   309  00002E                     	ds	2
   310  000030                     dtoa@p:
   311                           	callstack 0
   312                           
   313                           ; 2 bytes @ 0x2F
   314  000030                     	ds	2
   315  000032                     dtoa@w:
   316                           	callstack 0
   317                           
   318                           ; 2 bytes @ 0x31
   319  000032                     	ds	2
   320  000034                     dtoa@s:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x33
   324  000034                     	ds	2
   325  000036                     dtoa@n:
   326                           	callstack 0
   327                           
   328                           ; 8 bytes @ 0x35
   329  000036                     	ds	8
   330  00003E                     dtoa@i:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x3D
   334  00003E                     	ds	2
   335  000040                     ?_vfpfcnvrt:
   336                           	callstack 0
   337  000040                     vfpfcnvrt@fp:
   338                           	callstack 0
   339                           
   340                           ; 2 bytes @ 0x3F
   341  000040                     	ds	2
   342  000042                     vfpfcnvrt@fmt:
   343                           	callstack 0
   344                           
   345                           ; 2 bytes @ 0x41
   346  000042                     	ds	2
   347  000044                     vfpfcnvrt@ap:
   348                           	callstack 0
   349                           
   350                           ; 2 bytes @ 0x43
   351  000044                     	ds	2
   352  000046                     ??_vfpfcnvrt:
   353                           
   354                           ; 1 bytes @ 0x45
   355  000046                     	ds	2
   356  000048                     vfpfcnvrt@ll:
   357                           	callstack 0
   358                           
   359                           ; 8 bytes @ 0x47
   360  000048                     	ds	8
   361  000050                     ?_vfprintf:
   362                           	callstack 0
   363  000050                     vfprintf@fp:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x4F
   367  000050                     	ds	2
   368  000052                     vfprintf@fmt:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x51
   372  000052                     	ds	2
   373  000054                     vfprintf@ap:
   374                           	callstack 0
   375                           
   376                           ; 2 bytes @ 0x53
   377  000054                     	ds	2
   378  000056                     vfprintf@cfmt:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0x55
   382  000056                     	ds	2
   383  000058                     ?_printf:
   384                           	callstack 0
   385  000058                     printf@fmt:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x57
   389  000058                     	ds	4
   390  00005C                     printf@ap:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x5B
   394  00005C                     	ds	2
   395  00005E                     ??_main:
   396                           
   397                           ; 1 bytes @ 0x5D
   398  00005E                     	ds	1
   399  00005F                     main@a:
   400                           	callstack 0
   401                           
   402                           ; 1 bytes @ 0x5E
   403  00005F                     	ds	1
   404                           
   405 ;;
   406 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   407 ;;
   408 ;; *************** function _main *****************
   409 ;; Defined at:
   410 ;;		line 15 in file "fun.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;  argc            2    0[BANK0 ] int 
   413 ;;  argv            3    2[BANK0 ] PTR PTR unsigned char 
   414 ;; Auto vars:     Size  Location     Type
   415 ;;  a               1   94[COMRAM] unsigned char 
   416 ;; Return value:  Size  Location     Type
   417 ;;                  2    0[BANK0 ] int 
   418 ;; Registers used:
   419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   420 ;; Tracked objects:
   421 ;;		On entry : 0/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   425 ;;      Params:         0       5       0       0
   426 ;;      Locals:         1       0       0       0
   427 ;;      Temps:          1       0       0       0
   428 ;;      Totals:         2       5       0       0
   429 ;;Total ram usage:        7 bytes
   430 ;; Hardware stack levels required when called: 8
   431 ;; This function calls:
   432 ;;		_bitRead
   433 ;;		_bitValue
   434 ;;		_bitWrite
   435 ;;		_printf
   436 ;; This function is called by:
   437 ;;		Startup code after reset
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441                           	psect	text0
   442  000BE8                     __ptext0:
   443                           	callstack 0
   444  000BE8                     _main:
   445                           	callstack 23
   446  000BE8                     
   447                           ;fun.c: 17:     printf("%d\n", bitValue(5));
   448  000BE8  0E01               	movlw	low STR_1
   449  000BEA  6E58               	movwf	printf@fmt^0,c
   450  000BEC  0E03               	movlw	high STR_1
   451  000BEE  6E59               	movwf	(printf@fmt+1)^0,c
   452  000BF0  0E05               	movlw	5
   453  000BF2  ECF3  F006         	call	_bitValue
   454  000BF6  6E5E               	movwf	??_main^0,c
   455  000BF8  505E               	movf	??_main^0,w,c
   456  000BFA  6E5A               	movwf	(?_printf+2)^0,c
   457  000BFC  6A5B               	clrf	(?_printf+3)^0,c
   458  000BFE  ECD0  F006         	call	_printf	;wreg free
   459  000C02                     
   460                           ;fun.c: 18:     uint8_t a = 14;
   461  000C02  0E0E               	movlw	14
   462  000C04  6E5F               	movwf	main@a^0,c
   463  000C06                     
   464                           ;fun.c: 19:     bitWrite(&a, 0, 1);
   465  000C06  0E5F               	movlw	low main@a
   466  000C08  6E08               	movwf	bitWrite@number^0,c
   467  000C0A  0E00               	movlw	high main@a
   468  000C0C  6E09               	movwf	(bitWrite@number+1)^0,c
   469  000C0E  0E00               	movlw	0
   470  000C10  6E0A               	movwf	bitWrite@b^0,c
   471  000C12  0E01               	movlw	1
   472  000C14  6E0B               	movwf	bitWrite@val^0,c
   473  000C16  ECB5  F006         	call	_bitWrite	;wreg free
   474  000C1A                     
   475                           ;fun.c: 20:     printf("%d\n",a);
   476  000C1A  0E01               	movlw	low STR_1
   477  000C1C  6E58               	movwf	printf@fmt^0,c
   478  000C1E  0E03               	movlw	high STR_1
   479  000C20  6E59               	movwf	(printf@fmt+1)^0,c
   480  000C22  C05F  F05A         	movff	main@a,?_printf+2
   481  000C26  6A5B               	clrf	(?_printf+3)^0,c
   482  000C28  ECD0  F006         	call	_printf	;wreg free
   483  000C2C                     
   484                           ;fun.c: 21:     printf("%d", bitRead(8,3));
   485  000C2C  0E05               	movlw	low STR_3
   486  000C2E  6E58               	movwf	printf@fmt^0,c
   487  000C30  0E03               	movlw	high STR_3
   488  000C32  6E59               	movwf	(printf@fmt+1)^0,c
   489  000C34  0E03               	movlw	3
   490  000C36  6E01               	movwf	bitRead@b^0,c
   491  000C38  0E08               	movlw	8
   492  000C3A  ECE3  F006         	call	_bitRead
   493  000C3E  6E5E               	movwf	??_main^0,c
   494  000C40  505E               	movf	??_main^0,w,c
   495  000C42  6E5A               	movwf	(?_printf+2)^0,c
   496  000C44  6A5B               	clrf	(?_printf+3)^0,c
   497  000C46  ECD0  F006         	call	_printf	;wreg free
   498  000C4A  EF00  F000         	goto	start
   499  000C4E                     __end_of_main:
   500                           	callstack 0
   501                           
   502 ;; *************** function _printf *****************
   503 ;; Defined at:
   504 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\printf.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   507 ;;		 -> STR_3(3), STR_2(4), STR_1(4), 
   508 ;; Auto vars:     Size  Location     Type
   509 ;;  ap              2   91[COMRAM] PTR void [1]
   510 ;;		 -> ?_printf(2), 
   511 ;;  ret             2    0        int 
   512 ;; Return value:  Size  Location     Type
   513 ;;                  2   87[COMRAM] int 
   514 ;; Registers used:
   515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   521 ;;      Params:         4       0       0       0
   522 ;;      Locals:         2       0       0       0
   523 ;;      Temps:          0       0       0       0
   524 ;;      Totals:         6       0       0       0
   525 ;;Total ram usage:        6 bytes
   526 ;; Hardware stack levels used: 1
   527 ;; Hardware stack levels required when called: 7
   528 ;; This function calls:
   529 ;;		_vfprintf
   530 ;; This function is called by:
   531 ;;		_main
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           	psect	text1
   536  000DA0                     __ptext1:
   537                           	callstack 0
   538  000DA0                     _printf:
   539                           	callstack 23
   540  000DA0  0E5A               	movlw	low (?_printf+2)
   541  000DA2  6E5C               	movwf	printf@ap^0,c
   542  000DA4  0E00               	movlw	high (?_printf+2)
   543  000DA6  6E5D               	movwf	(printf@ap+1)^0,c
   544  000DA8  0E00               	movlw	0
   545  000DAA  6E50               	movwf	vfprintf@fp^0,c
   546  000DAC  0E00               	movlw	0
   547  000DAE  6E51               	movwf	(vfprintf@fp+1)^0,c
   548  000DB0  C058  F052         	movff	printf@fmt,vfprintf@fmt
   549  000DB4  C059  F053         	movff	printf@fmt+1,vfprintf@fmt+1
   550  000DB8  0E5C               	movlw	low printf@ap
   551  000DBA  6E54               	movwf	vfprintf@ap^0,c
   552  000DBC  0E00               	movlw	high printf@ap
   553  000DBE  6E55               	movwf	(vfprintf@ap+1)^0,c
   554  000DC0  EC27  F006         	call	_vfprintf	;wreg free
   555  000DC4  0012               	return		;funcret
   556  000DC6                     __end_of_printf:
   557                           	callstack 0
   558                           
   559 ;; *************** function _vfprintf *****************
   560 ;; Defined at:
   561 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   564 ;;		 -> NULL(0), 
   565 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   566 ;;		 -> STR_3(3), STR_2(4), STR_1(4), 
   567 ;;  ap              2   83[COMRAM] PTR PTR void 
   568 ;;		 -> printf@ap(2), 
   569 ;; Auto vars:     Size  Location     Type
   570 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   571 ;;		 -> STR_3(3), STR_2(4), STR_1(4), 
   572 ;; Return value:  Size  Location     Type
   573 ;;                  2   79[COMRAM] int 
   574 ;; Registers used:
   575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   581 ;;      Params:         6       0       0       0
   582 ;;      Locals:         2       0       0       0
   583 ;;      Temps:          0       0       0       0
   584 ;;      Totals:         8       0       0       0
   585 ;;Total ram usage:        8 bytes
   586 ;; Hardware stack levels used: 1
   587 ;; Hardware stack levels required when called: 6
   588 ;; This function calls:
   589 ;;		_vfpfcnvrt
   590 ;; This function is called by:
   591 ;;		_printf
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text2
   596  000C4E                     __ptext2:
   597                           	callstack 0
   598  000C4E                     _vfprintf:
   599                           	callstack 23
   600  000C4E                     
   601                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   602  000C4E  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   603  000C52  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   604  000C56                     
   605                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   606  000C56  0E00               	movlw	0
   607  000C58  0100               	movlb	0	; () banked
   608  000C5A  6F61               	movwf	(_nout+1)& (0+255),b
   609  000C5C  0E00               	movlw	0
   610  000C5E  6F60               	movwf	_nout& (0+255),b
   611                           
   612                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   613  000C60  EF45  F006         	goto	l1371
   614  000C64                     l1369:
   615                           
   616                           ; BSR set to: 0
   617                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   618  000C64  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   619  000C68  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   620  000C6C  0E56               	movlw	low vfprintf@cfmt
   621  000C6E  6E42               	movwf	vfpfcnvrt@fmt^0,c
   622  000C70  0E00               	movlw	high vfprintf@cfmt
   623  000C72  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   624  000C74  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   625  000C78  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   626  000C7C  ECF6  F002         	call	_vfpfcnvrt	;wreg free
   627  000C80  5040               	movf	?_vfpfcnvrt^0,w,c
   628  000C82  0100               	movlb	0	; () banked
   629  000C84  2760               	addwf	_nout& (0+255),f,b
   630  000C86  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   631  000C88  2361               	addwfc	(_nout+1)& (0+255),f,b
   632  000C8A                     l1371:
   633                           
   634                           ; BSR set to: 0
   635                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   636  000C8A  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   637  000C8E  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   638  000C92                     	if	0	;tblptru may be non-zero
   639  000C92                     	endif
   640  000C92                     	if	0	;tblptru may be non-zero
   641  000C92                     	endif
   642  000C92  0008               	tblrd		*
   643  000C94  50F5               	movf	tablat,w,c
   644  000C96  0900               	iorlw	0
   645  000C98  A4D8               	btfss	status,2,c
   646  000C9A  EF51  F006         	goto	u911
   647  000C9E  EF53  F006         	goto	u910
   648  000CA2                     u911:
   649  000CA2  EF32  F006         	goto	l1369
   650  000CA6                     u910:
   651  000CA6                     
   652                           ; BSR set to: 0
   653                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   654  000CA6  C060  F050         	movff	_nout,?_vfprintf
   655  000CAA  C061  F051         	movff	_nout+1,?_vfprintf+1
   656  000CAE                     
   657                           ; BSR set to: 0
   658  000CAE  0012               	return		;funcret
   659  000CB0                     __end_of_vfprintf:
   660                           	callstack 0
   661                           
   662 ;; *************** function _vfpfcnvrt *****************
   663 ;; Defined at:
   664 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   667 ;;		 -> NULL(0), 
   668 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   669 ;;		 -> vfprintf@cfmt(2), 
   670 ;;  ap              2   67[COMRAM] PTR PTR void 
   671 ;;		 -> printf@ap(2), 
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  ll              8   71[COMRAM] long long 
   674 ;;  llu             8    0        unsigned long long 
   675 ;;  f               4    0        unsigned long long 
   676 ;;  vp              3    0        PTR void 
   677 ;;  ct              3    0        unsigned char [3]
   678 ;;  cp              3    0        PTR unsigned char 
   679 ;;  i               2    0        int 
   680 ;;  done            2    0        int 
   681 ;;  c               1    0        unsigned char 
   682 ;; Return value:  Size  Location     Type
   683 ;;                  2   63[COMRAM] int 
   684 ;; Registers used:
   685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   686 ;; Tracked objects:
   687 ;;		On entry : 0/0
   688 ;;		On exit  : 0/0
   689 ;;		Unchanged: 0/0
   690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   691 ;;      Params:         6       0       0       0
   692 ;;      Locals:         8       0       0       0
   693 ;;      Temps:          2       0       0       0
   694 ;;      Totals:        16       0       0       0
   695 ;;Total ram usage:       16 bytes
   696 ;; Hardware stack levels used: 1
   697 ;; Hardware stack levels required when called: 5
   698 ;; This function calls:
   699 ;;		_dtoa
   700 ;;		_fputc
   701 ;; This function is called by:
   702 ;;		_vfprintf
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	text3
   707  0005EC                     __ptext3:
   708                           	callstack 0
   709  0005EC                     _vfpfcnvrt:
   710                           	callstack 23
   711  0005EC                     
   712                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   713  0005EC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   714  0005F0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   715  0005F4  CFDE FFF6          	movff	postinc2,tblptrl
   716  0005F8  CFDD FFF7          	movff	postdec2,tblptrh
   717  0005FC                     	if	0	;tblptru may be non-zero
   718  0005FC                     	endif
   719  0005FC                     	if	0	;tblptru may be non-zero
   720  0005FC                     	endif
   721  0005FC  0008               	tblrd		*
   722  0005FE  50F5               	movf	tablat,w,c
   723  000600  0A25               	xorlw	37
   724  000602  A4D8               	btfss	status,2,c
   725  000604  EF06  F003         	goto	u871
   726  000608  EF08  F003         	goto	u870
   727  00060C                     u871:
   728  00060C  EFB4  F003         	goto	l1353
   729  000610                     u870:
   730  000610                     
   731                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   732  000610  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   733  000614  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   734  000618  2ADE               	incf	postinc2,f,c
   735  00061A  0E00               	movlw	0
   736  00061C  22DD               	addwfc	postdec2,f,c
   737  00061E                     
   738                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   739  00061E  0E00               	movlw	0
   740  000620  0100               	movlb	0	; () banked
   741  000622  6F63               	movwf	(_width+1)& (0+255),b
   742  000624  0E00               	movlw	0
   743  000626  6F62               	movwf	_width& (0+255),b
   744  000628  C062  F066         	movff	_width,_flags
   745  00062C  C063  F067         	movff	_width+1,_flags+1
   746  000630                     
   747                           ; BSR set to: 0
   748                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   749  000630  6964               	setf	_prec& (0+255),b
   750  000632  6965               	setf	(_prec+1)& (0+255),b
   751  000634                     
   752                           ; BSR set to: 0
   753                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   754  000634  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   755  000638  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   756  00063C  CFDE FFF6          	movff	postinc2,tblptrl
   757  000640  CFDD FFF7          	movff	postdec2,tblptrh
   758  000644                     	if	0	;tblptru may be non-zero
   759  000644                     	endif
   760  000644                     	if	0	;tblptru may be non-zero
   761  000644                     	endif
   762  000644  0008               	tblrd		*
   763  000646  50F5               	movf	tablat,w,c
   764  000648  0A64               	xorlw	100
   765  00064A  B4D8               	btfsc	status,2,c
   766  00064C  EF2A  F003         	goto	u881
   767  000650  EF2C  F003         	goto	u880
   768  000654                     u881:
   769  000654  EF3E  F003         	goto	l1331
   770  000658                     u880:
   771  000658                     
   772                           ; BSR set to: 0
   773  000658  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   774  00065C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   775  000660  CFDE FFF6          	movff	postinc2,tblptrl
   776  000664  CFDD FFF7          	movff	postdec2,tblptrh
   777  000668                     	if	0	;tblptru may be non-zero
   778  000668                     	endif
   779  000668                     	if	0	;tblptru may be non-zero
   780  000668                     	endif
   781  000668  0008               	tblrd		*
   782  00066A  50F5               	movf	tablat,w,c
   783  00066C  0A69               	xorlw	105
   784  00066E  A4D8               	btfss	status,2,c
   785  000670  EF3C  F003         	goto	u891
   786  000674  EF3E  F003         	goto	u890
   787  000678                     u891:
   788  000678  EF7E  F003         	goto	l1337
   789  00067C                     u890:
   790  00067C                     l1331:
   791                           
   792                           ; BSR set to: 0
   793                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
   794  00067C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   795  000680  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   796  000684  2ADE               	incf	postinc2,f,c
   797  000686  0E00               	movlw	0
   798  000688  22DD               	addwfc	postdec2,f,c
   799                           
   800                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   801  00068A  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   802  00068E  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   803  000692  CFDF F046          	movff	indf2,??_vfpfcnvrt
   804  000696  0E02               	movlw	2
   805  000698  26DE               	addwf	postinc2,f,c
   806  00069A  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   807  00069E  0E00               	movlw	0
   808  0006A0  22DD               	addwfc	postdec2,f,c
   809  0006A2  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
   810  0006A6  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   811  0006AA  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
   812  0006AE  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
   813  0006B2  0E00               	movlw	0
   814  0006B4  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   815  0006B6  0EFF               	movlw	-1
   816  0006B8  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
   817  0006BA  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
   818  0006BC  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
   819  0006BE  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
   820  0006C0  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
   821  0006C2  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
   822  0006C4                     
   823                           ; BSR set to: 0
   824                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
   825  0006C4  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
   826  0006C8  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   827  0006CC  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
   828  0006D0  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   829  0006D4  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   830  0006D8  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   831  0006DC  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   832  0006E0  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   833  0006E4  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   834  0006E8  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   835  0006EC  EC85  F001         	call	_dtoa	;wreg free
   836  0006F0  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
   837  0006F4  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
   838  0006F8  EFCF  F003         	goto	l784
   839  0006FC                     l1337:
   840                           
   841                           ; BSR set to: 0
   842                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
   843  0006FC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   844  000700  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   845  000704  CFDE FFF6          	movff	postinc2,tblptrl
   846  000708  CFDD FFF7          	movff	postdec2,tblptrh
   847  00070C                     	if	0	;tblptru may be non-zero
   848  00070C                     	endif
   849  00070C                     	if	0	;tblptru may be non-zero
   850  00070C                     	endif
   851  00070C  0008               	tblrd		*
   852  00070E  50F5               	movf	tablat,w,c
   853  000710  0A25               	xorlw	37
   854  000712  A4D8               	btfss	status,2,c
   855  000714  EF8E  F003         	goto	u901
   856  000718  EF90  F003         	goto	u900
   857  00071C                     u901:
   858  00071C  EFA7  F003         	goto	l1347
   859  000720                     u900:
   860  000720                     
   861                           ; BSR set to: 0
   862                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
   863  000720  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   864  000724  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   865  000728  2ADE               	incf	postinc2,f,c
   866  00072A  0E00               	movlw	0
   867  00072C  22DD               	addwfc	postdec2,f,c
   868  00072E                     
   869                           ; BSR set to: 0
   870                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
   871  00072E  0E00               	movlw	0
   872  000730  6E02               	movwf	(fputc@c+1)^0,c
   873  000732  0E25               	movlw	37
   874  000734  6E01               	movwf	fputc@c^0,c
   875  000736  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   876  00073A  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   877  00073E  ECA9  F005         	call	_fputc	;wreg free
   878  000742                     l1343:
   879                           
   880                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
   881  000742  0E00               	movlw	0
   882  000744  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
   883  000746  0E01               	movlw	1
   884  000748  6E40               	movwf	?_vfpfcnvrt^0,c
   885  00074A  EFCF  F003         	goto	l784
   886  00074E                     l1347:
   887                           
   888                           ; BSR set to: 0
   889                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
   890  00074E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   891  000752  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   892  000756  2ADE               	incf	postinc2,f,c
   893  000758  0E00               	movlw	0
   894  00075A  22DD               	addwfc	postdec2,f,c
   895  00075C                     
   896                           ; BSR set to: 0
   897                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
   898  00075C  0E00               	movlw	0
   899  00075E  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
   900  000760  0E00               	movlw	0
   901  000762  6E40               	movwf	?_vfpfcnvrt^0,c
   902  000764  EFCF  F003         	goto	l784
   903  000768                     l1353:
   904                           
   905                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
   906  000768  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   907  00076C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   908  000770  CFDE FFF6          	movff	postinc2,tblptrl
   909  000774  CFDD FFF7          	movff	postdec2,tblptrh
   910  000778                     	if	0	;tblptru may be non-zero
   911  000778                     	endif
   912  000778                     	if	0	;tblptru may be non-zero
   913  000778                     	endif
   914  000778  0008               	tblrd		*
   915  00077A  50F5               	movf	tablat,w,c
   916  00077C  6E01               	movwf	fputc@c^0,c
   917  00077E  6A02               	clrf	(fputc@c+1)^0,c
   918  000780  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   919  000784  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   920  000788  ECA9  F005         	call	_fputc	;wreg free
   921  00078C                     
   922                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
   923  00078C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   924  000790  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   925  000794  2ADE               	incf	postinc2,f,c
   926  000796  0E00               	movlw	0
   927  000798  22DD               	addwfc	postdec2,f,c
   928  00079A  EFA1  F003         	goto	l1343
   929  00079E                     l784:
   930  00079E  0012               	return		;funcret
   931  0007A0                     __end_of_vfpfcnvrt:
   932                           	callstack 0
   933                           
   934 ;; *************** function _dtoa *****************
   935 ;; Defined at:
   936 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
   939 ;;		 -> NULL(0), 
   940 ;;  d               8   29[COMRAM] long long 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  n               8   53[COMRAM] long long 
   943 ;;  i               2   61[COMRAM] int 
   944 ;;  s               2   51[COMRAM] int 
   945 ;;  w               2   49[COMRAM] int 
   946 ;;  p               2   47[COMRAM] int 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  2   27[COMRAM] int 
   949 ;; Registers used:
   950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   956 ;;      Params:        10       0       0       0
   957 ;;      Locals:        18       0       0       0
   958 ;;      Temps:          8       0       0       0
   959 ;;      Totals:        36       0       0       0
   960 ;;Total ram usage:       36 bytes
   961 ;; Hardware stack levels used: 1
   962 ;; Hardware stack levels required when called: 4
   963 ;; This function calls:
   964 ;;		___aodiv
   965 ;;		___aomod
   966 ;;		_abs
   967 ;;		_pad
   968 ;; This function is called by:
   969 ;;		_vfpfcnvrt
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           	psect	text4
   974  00030A                     __ptext4:
   975                           	callstack 0
   976  00030A                     _dtoa:
   977                           	callstack 23
   978  00030A                     
   979                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
   980  00030A  C01E  F036         	movff	dtoa@d,dtoa@n
   981  00030E  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
   982  000312  C020  F038         	movff	dtoa@d+2,dtoa@n+2
   983  000316  C021  F039         	movff	dtoa@d+3,dtoa@n+3
   984  00031A  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
   985  00031E  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
   986  000322  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
   987  000326  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
   988  00032A                     
   989                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
   990  00032A  BE3D               	btfsc	(dtoa@n+7)^0,7,c
   991  00032C  EF9A  F001         	goto	u721
   992  000330  EF9D  F001         	goto	u720
   993  000334                     u721:
   994  000334  0E01               	movlw	1
   995  000336  EF9E  F001         	goto	u730
   996  00033A                     u720:
   997  00033A  0E00               	movlw	0
   998  00033C                     u730:
   999  00033C  6E34               	movwf	dtoa@s^0,c
  1000  00033E  6A35               	clrf	(dtoa@s+1)^0,c
  1001                           
  1002                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1003  000340  5034               	movf	dtoa@s^0,w,c
  1004  000342  1035               	iorwf	(dtoa@s+1)^0,w,c
  1005  000344  B4D8               	btfsc	status,2,c
  1006  000346  EFA7  F001         	goto	u741
  1007  00034A  EFA9  F001         	goto	u740
  1008  00034E                     u741:
  1009  00034E  EFB9  F001         	goto	l1263
  1010  000352                     u740:
  1011  000352                     
  1012                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1013  000352  1E3D               	comf	(dtoa@n+7)^0,f,c
  1014  000354  1E3C               	comf	(dtoa@n+6)^0,f,c
  1015  000356  1E3B               	comf	(dtoa@n+5)^0,f,c
  1016  000358  1E3A               	comf	(dtoa@n+4)^0,f,c
  1017  00035A  1E39               	comf	(dtoa@n+3)^0,f,c
  1018  00035C  1E38               	comf	(dtoa@n+2)^0,f,c
  1019  00035E  1E37               	comf	(dtoa@n+1)^0,f,c
  1020  000360  6C36               	negf	dtoa@n^0,c
  1021  000362  0E00               	movlw	0
  1022  000364  2237               	addwfc	(dtoa@n+1)^0,f,c
  1023  000366  2238               	addwfc	(dtoa@n+2)^0,f,c
  1024  000368  2239               	addwfc	(dtoa@n+3)^0,f,c
  1025  00036A  223A               	addwfc	(dtoa@n+4)^0,f,c
  1026  00036C  223B               	addwfc	(dtoa@n+5)^0,f,c
  1027  00036E  223C               	addwfc	(dtoa@n+6)^0,f,c
  1028  000370  223D               	addwfc	(dtoa@n+7)^0,f,c
  1029  000372                     l1263:
  1030                           
  1031                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1032  000372  0100               	movlb	0	; () banked
  1033  000374  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1034  000376  EFBF  F001         	goto	u751
  1035  00037A  EFC1  F001         	goto	u750
  1036  00037E                     u751:
  1037  00037E  EFC2  F001         	goto	l1267
  1038  000382                     u750:
  1039  000382                     
  1040                           ; BSR set to: 0
  1041                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1042  000382  9366               	bcf	_flags& (0+255),1,b
  1043  000384                     l1267:
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1047  000384  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1048  000386  EFCF  F001         	goto	u760
  1049  00038A  5165               	movf	(_prec+1)& (0+255),w,b
  1050  00038C  E106               	bnz	u761
  1051  00038E  0564               	decf	_prec& (0+255),w,b
  1052  000390  B0D8               	btfsc	status,0,c
  1053  000392  EFCD  F001         	goto	u761
  1054  000396  EFCF  F001         	goto	u760
  1055  00039A                     u761:
  1056  00039A  EFD5  F001         	goto	l757
  1057  00039E                     u760:
  1058  00039E                     
  1059                           ; BSR set to: 0
  1060  00039E  0E00               	movlw	0
  1061  0003A0  6E31               	movwf	(dtoa@p+1)^0,c
  1062  0003A2  0E01               	movlw	1
  1063  0003A4  6E30               	movwf	dtoa@p^0,c
  1064  0003A6  EFD9  F001         	goto	l759
  1065  0003AA                     l757:
  1066                           
  1067                           ; BSR set to: 0
  1068  0003AA  C064  F030         	movff	_prec,dtoa@p
  1069  0003AE  C065  F031         	movff	_prec+1,dtoa@p+1
  1070  0003B2                     l759:
  1071                           
  1072                           ; BSR set to: 0
  1073                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1074  0003B2  C062  F032         	movff	_width,dtoa@w
  1075  0003B6  C063  F033         	movff	_width+1,dtoa@w+1
  1076  0003BA                     
  1077                           ; BSR set to: 0
  1078                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1079  0003BA  5034               	movf	dtoa@s^0,w,c
  1080  0003BC  1035               	iorwf	(dtoa@s+1)^0,w,c
  1081  0003BE  A4D8               	btfss	status,2,c
  1082  0003C0  EFE4  F001         	goto	u771
  1083  0003C4  EFE6  F001         	goto	u770
  1084  0003C8                     u771:
  1085  0003C8  EFED  F001         	goto	l1275
  1086  0003CC                     u770:
  1087  0003CC                     
  1088                           ; BSR set to: 0
  1089  0003CC  A566               	btfss	_flags& (0+255),2,b
  1090  0003CE  EFEB  F001         	goto	u781
  1091  0003D2  EFED  F001         	goto	u780
  1092  0003D6                     u781:
  1093  0003D6  EFF0  F001         	goto	l1277
  1094  0003DA                     u780:
  1095  0003DA                     l1275:
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
  1099  0003DA  0632               	decf	dtoa@w^0,f,c
  1100  0003DC  A0D8               	btfss	status,0,c
  1101  0003DE  0633               	decf	(dtoa@w+1)^0,f,c
  1102  0003E0                     l1277:
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1106  0003E0  0E00               	movlw	0
  1107  0003E2  6E3F               	movwf	(dtoa@i+1)^0,c
  1108  0003E4  0E1F               	movlw	31
  1109  0003E6  6E3E               	movwf	dtoa@i^0,c
  1110  0003E8                     
  1111                           ; BSR set to: 0
  1112                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1113  0003E8  0E00               	movlw	0
  1114  0003EA  6F87               	movwf	(_dbuf+31)& (0+255),b
  1115                           
  1116                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1117  0003EC  EF74  F002         	goto	l1291
  1118  0003F0                     l1281:
  1119                           
  1120                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
  1121  0003F0  063E               	decf	dtoa@i^0,f,c
  1122  0003F2  A0D8               	btfss	status,0,c
  1123  0003F4  063F               	decf	(dtoa@i+1)^0,f,c
  1124  0003F6                     
  1125                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1126  0003F6  0E68               	movlw	low _dbuf
  1127  0003F8  243E               	addwf	dtoa@i^0,w,c
  1128  0003FA  6ED9               	movwf	fsr2l,c
  1129  0003FC  0E00               	movlw	high _dbuf
  1130  0003FE  203F               	addwfc	(dtoa@i+1)^0,w,c
  1131  000400  6EDA               	movwf	fsr2h,c
  1132  000402  C036  F001         	movff	dtoa@n,___aomod@dividend
  1133  000406  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1134  00040A  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1135  00040E  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1136  000412  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1137  000416  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1138  00041A  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1139  00041E  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1140  000422  0E0A               	movlw	10
  1141  000424  6E09               	movwf	___aomod@divisor^0,c
  1142  000426  0E00               	movlw	0
  1143  000428  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1144  00042A  0E00               	movlw	0
  1145  00042C  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1146  00042E  0E00               	movlw	0
  1147  000430  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1148  000432  0E00               	movlw	0
  1149  000434  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1150  000436  0E00               	movlw	0
  1151  000438  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1152  00043A  0E00               	movlw	0
  1153  00043C  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1154  00043E  0E00               	movlw	0
  1155  000440  6E10               	movwf	(___aomod@divisor+7)^0,c
  1156  000442  EC94  F004         	call	___aomod	;wreg free
  1157  000446  C001  F026         	movff	?___aomod,??_dtoa
  1158  00044A  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1159  00044E  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1160  000452  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1161  000456  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1162  00045A  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1163  00045E  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1164  000462  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1165  000466  C026  F013         	movff	??_dtoa,abs@a
  1166  00046A  C028  F014         	movff	??_dtoa+2,abs@a+1
  1167  00046E  EC7A  F006         	call	_abs	;wreg free
  1168  000472  5013               	movf	?_abs^0,w,c
  1169  000474  0F30               	addlw	48
  1170  000476  6EDF               	movwf	indf2,c
  1171  000478                     
  1172                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
  1173  000478  0630               	decf	dtoa@p^0,f,c
  1174  00047A  A0D8               	btfss	status,0,c
  1175  00047C  0631               	decf	(dtoa@p+1)^0,f,c
  1176  00047E                     
  1177                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
  1178  00047E  0632               	decf	dtoa@w^0,f,c
  1179  000480  A0D8               	btfss	status,0,c
  1180  000482  0633               	decf	(dtoa@w+1)^0,f,c
  1181  000484                     
  1182                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1183  000484  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1184  000488  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1185  00048C  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1186  000490  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1187  000494  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1188  000498  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1189  00049C  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1190  0004A0  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1191  0004A4  0E0A               	movlw	10
  1192  0004A6  6E09               	movwf	___aodiv@divisor^0,c
  1193  0004A8  0E00               	movlw	0
  1194  0004AA  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1195  0004AC  0E00               	movlw	0
  1196  0004AE  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1197  0004B0  0E00               	movlw	0
  1198  0004B2  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1199  0004B4  0E00               	movlw	0
  1200  0004B6  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1201  0004B8  0E00               	movlw	0
  1202  0004BA  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1203  0004BC  0E00               	movlw	0
  1204  0004BE  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1205  0004C0  0E00               	movlw	0
  1206  0004C2  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1207  0004C4  ECD0  F003         	call	___aodiv	;wreg free
  1208  0004C8  C001  F036         	movff	?___aodiv,dtoa@n
  1209  0004CC  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1210  0004D0  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1211  0004D4  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1212  0004D8  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1213  0004DC  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1214  0004E0  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1215  0004E4  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1216  0004E8                     l1291:
  1217                           
  1218                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1219  0004E8  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1220  0004EA  EF7F  F002         	goto	u791
  1221  0004EE  503F               	movf	(dtoa@i+1)^0,w,c
  1222  0004F0  E108               	bnz	u790
  1223  0004F2  043E               	decf	dtoa@i^0,w,c
  1224  0004F4  A0D8               	btfss	status,0,c
  1225  0004F6  EF7F  F002         	goto	u791
  1226  0004FA  EF81  F002         	goto	u790
  1227  0004FE                     u791:
  1228  0004FE  EFB2  F002         	goto	l1301
  1229  000502                     u790:
  1230  000502  5036               	movf	dtoa@n^0,w,c
  1231  000504  1037               	iorwf	(dtoa@n+1)^0,w,c
  1232  000506  1038               	iorwf	(dtoa@n+2)^0,w,c
  1233  000508  1039               	iorwf	(dtoa@n+3)^0,w,c
  1234  00050A  103A               	iorwf	(dtoa@n+4)^0,w,c
  1235  00050C  103B               	iorwf	(dtoa@n+5)^0,w,c
  1236  00050E  103C               	iorwf	(dtoa@n+6)^0,w,c
  1237  000510  103D               	iorwf	(dtoa@n+7)^0,w,c
  1238  000512  A4D8               	btfss	status,2,c
  1239  000514  EF8E  F002         	goto	u801
  1240  000518  EF90  F002         	goto	u800
  1241  00051C                     u801:
  1242  00051C  EFF8  F001         	goto	l1281
  1243  000520                     u800:
  1244  000520  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1245  000522  EF9D  F002         	goto	u810
  1246  000526  5031               	movf	(dtoa@p+1)^0,w,c
  1247  000528  E106               	bnz	u811
  1248  00052A  0430               	decf	dtoa@p^0,w,c
  1249  00052C  B0D8               	btfsc	status,0,c
  1250  00052E  EF9B  F002         	goto	u811
  1251  000532  EF9D  F002         	goto	u810
  1252  000536                     u811:
  1253  000536  EFF8  F001         	goto	l1281
  1254  00053A                     u810:
  1255  00053A  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1256  00053C  EFA8  F002         	goto	u821
  1257  000540  5033               	movf	(dtoa@w+1)^0,w,c
  1258  000542  E108               	bnz	u820
  1259  000544  0432               	decf	dtoa@w^0,w,c
  1260  000546  A0D8               	btfss	status,0,c
  1261  000548  EFA8  F002         	goto	u821
  1262  00054C  EFAA  F002         	goto	u820
  1263  000550                     u821:
  1264  000550  EFB2  F002         	goto	l1301
  1265  000554                     u820:
  1266  000554  0100               	movlb	0	; () banked
  1267  000556  B366               	btfsc	_flags& (0+255),1,b
  1268  000558  EFB0  F002         	goto	u831
  1269  00055C  EFB2  F002         	goto	u830
  1270  000560                     u831:
  1271  000560  EFF8  F001         	goto	l1281
  1272  000564                     u830:
  1273  000564                     l1301:
  1274                           
  1275                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1276  000564  5034               	movf	dtoa@s^0,w,c
  1277  000566  1035               	iorwf	(dtoa@s+1)^0,w,c
  1278  000568  A4D8               	btfss	status,2,c
  1279  00056A  EFB9  F002         	goto	u841
  1280  00056E  EFBB  F002         	goto	u840
  1281  000572                     u841:
  1282  000572  EFC3  F002         	goto	l1305
  1283  000576                     u840:
  1284  000576  0100               	movlb	0	; () banked
  1285  000578  A566               	btfss	_flags& (0+255),2,b
  1286  00057A  EFC1  F002         	goto	u851
  1287  00057E  EFC3  F002         	goto	u850
  1288  000582                     u851:
  1289  000582  EFE1  F002         	goto	l1315
  1290  000586                     u850:
  1291  000586                     l1305:
  1292                           
  1293                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
  1294  000586  063E               	decf	dtoa@i^0,f,c
  1295  000588  A0D8               	btfss	status,0,c
  1296  00058A  063F               	decf	(dtoa@i+1)^0,f,c
  1297  00058C                     
  1298                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1299  00058C  5034               	movf	dtoa@s^0,w,c
  1300  00058E  1035               	iorwf	(dtoa@s+1)^0,w,c
  1301  000590  A4D8               	btfss	status,2,c
  1302  000592  EFCD  F002         	goto	u861
  1303  000596  EFCF  F002         	goto	u860
  1304  00059A                     u861:
  1305  00059A  EFD5  F002         	goto	l1311
  1306  00059E                     u860:
  1307  00059E  0E00               	movlw	0
  1308  0005A0  6E2F               	movwf	(_dtoa$582+1)^0,c
  1309  0005A2  0E2B               	movlw	43
  1310  0005A4  6E2E               	movwf	_dtoa$582^0,c
  1311  0005A6  EFD9  F002         	goto	l1313
  1312  0005AA                     l1311:
  1313  0005AA  0E00               	movlw	0
  1314  0005AC  6E2F               	movwf	(_dtoa$582+1)^0,c
  1315  0005AE  0E2D               	movlw	45
  1316  0005B0  6E2E               	movwf	_dtoa$582^0,c
  1317  0005B2                     l1313:
  1318  0005B2  0E68               	movlw	low _dbuf
  1319  0005B4  243E               	addwf	dtoa@i^0,w,c
  1320  0005B6  6ED9               	movwf	fsr2l,c
  1321  0005B8  0E00               	movlw	high _dbuf
  1322  0005BA  203F               	addwfc	(dtoa@i+1)^0,w,c
  1323  0005BC  6EDA               	movwf	fsr2h,c
  1324  0005BE  C02E  FFDF         	movff	_dtoa$582,indf2
  1325  0005C2                     l1315:
  1326                           
  1327                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1328  0005C2  C01C  F011         	movff	dtoa@fp,pad@fp
  1329  0005C6  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1330  0005CA  0E68               	movlw	low _dbuf
  1331  0005CC  243E               	addwf	dtoa@i^0,w,c
  1332  0005CE  6E13               	movwf	pad@buf^0,c
  1333  0005D0  0E00               	movlw	high _dbuf
  1334  0005D2  203F               	addwfc	(dtoa@i+1)^0,w,c
  1335  0005D4  6E14               	movwf	(pad@buf+1)^0,c
  1336  0005D6  C032  F015         	movff	dtoa@w,pad@p
  1337  0005DA  C033  F016         	movff	dtoa@w+1,pad@p+1
  1338  0005DE  EC46  F005         	call	_pad	;wreg free
  1339  0005E2  C011  F01C         	movff	?_pad,?_dtoa
  1340  0005E6  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1341  0005EA  0012               	return		;funcret
  1342  0005EC                     __end_of_dtoa:
  1343                           	callstack 0
  1344                           
  1345 ;; *************** function _pad *****************
  1346 ;; Defined at:
  1347 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1350 ;;		 -> NULL(0), 
  1351 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1352 ;;		 -> dbuf(32), 
  1353 ;;  p               2   20[COMRAM] int 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  w               2   25[COMRAM] int 
  1356 ;;  i               2   23[COMRAM] int 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  2   16[COMRAM] int 
  1359 ;; Registers used:
  1360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1366 ;;      Params:         6       0       0       0
  1367 ;;      Locals:         4       0       0       0
  1368 ;;      Temps:          1       0       0       0
  1369 ;;      Totals:        11       0       0       0
  1370 ;;Total ram usage:       11 bytes
  1371 ;; Hardware stack levels used: 1
  1372 ;; Hardware stack levels required when called: 3
  1373 ;; This function calls:
  1374 ;;		_fputc
  1375 ;;		_fputs
  1376 ;;		_strlen
  1377 ;; This function is called by:
  1378 ;;		_dtoa
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text5
  1383  000A8C                     __ptext5:
  1384                           	callstack 0
  1385  000A8C                     _pad:
  1386                           	callstack 23
  1387  000A8C                     
  1388                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1389  000A8C  0100               	movlb	0	; () banked
  1390  000A8E  A166               	btfss	_flags& (0+255),0,b
  1391  000A90  EF4C  F005         	goto	u671
  1392  000A94  EF4E  F005         	goto	u670
  1393  000A98                     u671:
  1394  000A98  EF58  F005         	goto	l1235
  1395  000A9C                     u670:
  1396  000A9C                     
  1397                           ; BSR set to: 0
  1398                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1399  000A9C  C013  F00A         	movff	pad@buf,fputs@s
  1400  000AA0  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1401  000AA4  C011  F00C         	movff	pad@fp,fputs@fp
  1402  000AA8  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1403  000AAC  EC58  F006         	call	_fputs	;wreg free
  1404  000AB0                     l1235:
  1405                           
  1406                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1407  000AB0  BE16               	btfsc	(pad@p+1)^0,7,c
  1408  000AB2  EF5D  F005         	goto	u681
  1409  000AB6  EF5F  F005         	goto	u680
  1410  000ABA                     u681:
  1411  000ABA  EF65  F005         	goto	l1239
  1412  000ABE                     u680:
  1413  000ABE  C015  F01A         	movff	pad@p,pad@w
  1414  000AC2  C016  F01B         	movff	pad@p+1,pad@w+1
  1415  000AC6  EF69  F005         	goto	l746
  1416  000ACA                     l1239:
  1417  000ACA  0E00               	movlw	0
  1418  000ACC  6E1B               	movwf	(pad@w+1)^0,c
  1419  000ACE  0E00               	movlw	0
  1420  000AD0  6E1A               	movwf	pad@w^0,c
  1421  000AD2                     l746:
  1422                           
  1423                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1424  000AD2  0E00               	movlw	0
  1425  000AD4  6E19               	movwf	(pad@i+1)^0,c
  1426  000AD6  0E00               	movlw	0
  1427  000AD8  6E18               	movwf	pad@i^0,c
  1428                           
  1429                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1430  000ADA  EF7B  F005         	goto	l1245
  1431  000ADE                     l1241:
  1432                           
  1433                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1434  000ADE  0E00               	movlw	0
  1435  000AE0  6E02               	movwf	(fputc@c+1)^0,c
  1436  000AE2  0E20               	movlw	32
  1437  000AE4  6E01               	movwf	fputc@c^0,c
  1438  000AE6  C011  F003         	movff	pad@fp,fputc@fp
  1439  000AEA  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1440  000AEE  ECA9  F005         	call	_fputc	;wreg free
  1441  000AF2                     
  1442                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1443  000AF2  4A18               	infsnz	pad@i^0,f,c
  1444  000AF4  2A19               	incf	(pad@i+1)^0,f,c
  1445  000AF6                     l1245:
  1446                           
  1447                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1448  000AF6  501A               	movf	pad@w^0,w,c
  1449  000AF8  5C18               	subwf	pad@i^0,w,c
  1450  000AFA  5019               	movf	(pad@i+1)^0,w,c
  1451  000AFC  0A80               	xorlw	128
  1452  000AFE  6E17               	movwf	??_pad^0,c
  1453  000B00  501B               	movf	(pad@w+1)^0,w,c
  1454  000B02  0A80               	xorlw	128
  1455  000B04  5817               	subwfb	??_pad^0,w,c
  1456  000B06  A0D8               	btfss	status,0,c
  1457  000B08  EF88  F005         	goto	u691
  1458  000B0C  EF8A  F005         	goto	u690
  1459  000B10                     u691:
  1460  000B10  EF6F  F005         	goto	l1241
  1461  000B14                     u690:
  1462  000B14                     
  1463                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1464  000B14  0100               	movlb	0	; () banked
  1465  000B16  B166               	btfsc	_flags& (0+255),0,b
  1466  000B18  EF90  F005         	goto	u701
  1467  000B1C  EF92  F005         	goto	u700
  1468  000B20                     u701:
  1469  000B20  EF9C  F005         	goto	l1249
  1470  000B24                     u700:
  1471  000B24                     
  1472                           ; BSR set to: 0
  1473                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1474  000B24  C013  F00A         	movff	pad@buf,fputs@s
  1475  000B28  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1476  000B2C  C011  F00C         	movff	pad@fp,fputs@fp
  1477  000B30  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1478  000B34  EC58  F006         	call	_fputs	;wreg free
  1479  000B38                     l1249:
  1480                           
  1481                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1482  000B38  C013  F001         	movff	pad@buf,strlen@s
  1483  000B3C  C014  F002         	movff	pad@buf+1,strlen@s+1
  1484  000B40  EC9A  F006         	call	_strlen	;wreg free
  1485  000B44  501A               	movf	pad@w^0,w,c
  1486  000B46  2401               	addwf	?_strlen^0,w,c
  1487  000B48  6E11               	movwf	?_pad^0,c
  1488  000B4A  501B               	movf	(pad@w+1)^0,w,c
  1489  000B4C  2002               	addwfc	(?_strlen+1)^0,w,c
  1490  000B4E  6E12               	movwf	(?_pad+1)^0,c
  1491  000B50  0012               	return		;funcret
  1492  000B52                     __end_of_pad:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _strlen *****************
  1496 ;; Defined at:
  1497 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1500 ;;		 -> dbuf(32), 
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1503 ;;		 -> dbuf(32), 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  2    0[COMRAM] unsigned int 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1513 ;;      Params:         2       0       0       0
  1514 ;;      Locals:         2       0       0       0
  1515 ;;      Temps:          0       0       0       0
  1516 ;;      Totals:         4       0       0       0
  1517 ;;Total ram usage:        4 bytes
  1518 ;; Hardware stack levels used: 1
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_pad
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text6
  1527  000D34                     __ptext6:
  1528                           	callstack 0
  1529  000D34                     _strlen:
  1530                           	callstack 25
  1531  000D34  C001  F003         	movff	strlen@s,strlen@a
  1532  000D38  C002  F004         	movff	strlen@s+1,strlen@a+1
  1533  000D3C  EFA2  F006         	goto	l1145
  1534  000D40                     l1143:
  1535  000D40  4A01               	infsnz	strlen@s^0,f,c
  1536  000D42  2A02               	incf	(strlen@s+1)^0,f,c
  1537  000D44                     l1145:
  1538  000D44  C001  FFD9         	movff	strlen@s,fsr2l
  1539  000D48  C002  FFDA         	movff	strlen@s+1,fsr2h
  1540  000D4C  50DF               	movf	indf2,w,c
  1541  000D4E  A4D8               	btfss	status,2,c
  1542  000D50  EFAC  F006         	goto	u531
  1543  000D54  EFAE  F006         	goto	u530
  1544  000D58                     u531:
  1545  000D58  EFA0  F006         	goto	l1143
  1546  000D5C                     u530:
  1547  000D5C  5003               	movf	strlen@a^0,w,c
  1548  000D5E  5C01               	subwf	strlen@s^0,w,c
  1549  000D60  6E01               	movwf	?_strlen^0,c
  1550  000D62  5004               	movf	(strlen@a+1)^0,w,c
  1551  000D64  5802               	subwfb	(strlen@s+1)^0,w,c
  1552  000D66  6E02               	movwf	(?_strlen+1)^0,c
  1553  000D68  0012               	return		;funcret
  1554  000D6A                     __end_of_strlen:
  1555                           	callstack 0
  1556                           
  1557 ;; *************** function _fputs *****************
  1558 ;; Defined at:
  1559 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1562 ;;		 -> dbuf(32), 
  1563 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1564 ;;		 -> NULL(0), 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  i               2   14[COMRAM] int 
  1567 ;;  c               1   13[COMRAM] unsigned char 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  2    9[COMRAM] int 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1577 ;;      Params:         4       0       0       0
  1578 ;;      Locals:         3       0       0       0
  1579 ;;      Temps:          0       0       0       0
  1580 ;;      Totals:         7       0       0       0
  1581 ;;Total ram usage:        7 bytes
  1582 ;; Hardware stack levels used: 1
  1583 ;; Hardware stack levels required when called: 2
  1584 ;; This function calls:
  1585 ;;		_fputc
  1586 ;; This function is called by:
  1587 ;;		_pad
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text7
  1592  000CB0                     __ptext7:
  1593                           	callstack 0
  1594  000CB0                     _fputs:
  1595                           	callstack 23
  1596  000CB0  0E00               	movlw	0
  1597  000CB2  6E10               	movwf	(fputs@i+1)^0,c
  1598  000CB4  0E00               	movlw	0
  1599  000CB6  6E0F               	movwf	fputs@i^0,c
  1600  000CB8  EF69  F006         	goto	l1139
  1601  000CBC                     l1135:
  1602  000CBC  C00E  F001         	movff	fputs@c,fputc@c
  1603  000CC0  6A02               	clrf	(fputc@c+1)^0,c
  1604  000CC2  C00C  F003         	movff	fputs@fp,fputc@fp
  1605  000CC6  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1606  000CCA  ECA9  F005         	call	_fputc	;wreg free
  1607  000CCE  4A0F               	infsnz	fputs@i^0,f,c
  1608  000CD0  2A10               	incf	(fputs@i+1)^0,f,c
  1609  000CD2                     l1139:
  1610  000CD2  500F               	movf	fputs@i^0,w,c
  1611  000CD4  240A               	addwf	fputs@s^0,w,c
  1612  000CD6  6ED9               	movwf	fsr2l,c
  1613  000CD8  5010               	movf	(fputs@i+1)^0,w,c
  1614  000CDA  200B               	addwfc	(fputs@s+1)^0,w,c
  1615  000CDC  6EDA               	movwf	fsr2h,c
  1616  000CDE  50DF               	movf	indf2,w,c
  1617  000CE0  6E0E               	movwf	fputs@c^0,c
  1618  000CE2  500E               	movf	fputs@c^0,w,c
  1619  000CE4  A4D8               	btfss	status,2,c
  1620  000CE6  EF77  F006         	goto	u521
  1621  000CEA  EF79  F006         	goto	u520
  1622  000CEE                     u521:
  1623  000CEE  EF5E  F006         	goto	l1135
  1624  000CF2                     u520:
  1625  000CF2  0012               	return		;funcret
  1626  000CF4                     __end_of_fputs:
  1627                           	callstack 0
  1628                           
  1629 ;; *************** function _fputc *****************
  1630 ;; Defined at:
  1631 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  c               2    0[COMRAM] int 
  1634 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1635 ;;		 -> NULL(0), 
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;		None
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  2    0[COMRAM] int 
  1640 ;; Registers used:
  1641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1647 ;;      Params:         4       0       0       0
  1648 ;;      Locals:         0       0       0       0
  1649 ;;      Temps:          5       0       0       0
  1650 ;;      Totals:         9       0       0       0
  1651 ;;Total ram usage:        9 bytes
  1652 ;; Hardware stack levels used: 1
  1653 ;; Hardware stack levels required when called: 1
  1654 ;; This function calls:
  1655 ;;		_putch
  1656 ;; This function is called by:
  1657 ;;		_pad
  1658 ;;		_vfpfcnvrt
  1659 ;;		_fputs
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text8
  1664  000B52                     __ptext8:
  1665                           	callstack 0
  1666  000B52                     _fputc:
  1667                           	callstack 26
  1668  000B52  5003               	movf	fputc@fp^0,w,c
  1669  000B54  1004               	iorwf	(fputc@fp+1)^0,w,c
  1670  000B56  B4D8               	btfsc	status,2,c
  1671  000B58  EFB0  F005         	goto	u481
  1672  000B5C  EFB2  F005         	goto	u480
  1673  000B60                     u481:
  1674  000B60  EFBB  F005         	goto	l1123
  1675  000B64                     u480:
  1676  000B64  5003               	movf	fputc@fp^0,w,c
  1677  000B66  1004               	iorwf	(fputc@fp+1)^0,w,c
  1678  000B68  A4D8               	btfss	status,2,c
  1679  000B6A  EFB9  F005         	goto	u491
  1680  000B6E  EFBB  F005         	goto	u490
  1681  000B72                     u491:
  1682  000B72  EFC0  F005         	goto	l1125
  1683  000B76                     u490:
  1684  000B76                     l1123:
  1685  000B76  5001               	movf	fputc@c^0,w,c
  1686  000B78  EC26  F007         	call	_putch
  1687  000B7C  EFF3  F005         	goto	l810
  1688  000B80                     l1125:
  1689  000B80  EE20 F004          	lfsr	2,4
  1690  000B84  5003               	movf	fputc@fp^0,w,c
  1691  000B86  26D9               	addwf	fsr2l,f,c
  1692  000B88  5004               	movf	(fputc@fp+1)^0,w,c
  1693  000B8A  22DA               	addwfc	fsr2h,f,c
  1694  000B8C  50DE               	movf	postinc2,w,c
  1695  000B8E  10DE               	iorwf	postinc2,w,c
  1696  000B90  B4D8               	btfsc	status,2,c
  1697  000B92  EFCD  F005         	goto	u501
  1698  000B96  EFCF  F005         	goto	u500
  1699  000B9A                     u501:
  1700  000B9A  EFEA  F005         	goto	l1129
  1701  000B9E                     u500:
  1702  000B9E  EE20 F004          	lfsr	2,4
  1703  000BA2  5003               	movf	fputc@fp^0,w,c
  1704  000BA4  26D9               	addwf	fsr2l,f,c
  1705  000BA6  5004               	movf	(fputc@fp+1)^0,w,c
  1706  000BA8  22DA               	addwfc	fsr2h,f,c
  1707  000BAA  EE10 F002          	lfsr	1,2
  1708  000BAE  5003               	movf	fputc@fp^0,w,c
  1709  000BB0  26E1               	addwf	fsr1l,f,c
  1710  000BB2  5004               	movf	(fputc@fp+1)^0,w,c
  1711  000BB4  22E2               	addwfc	fsr1h,f,c
  1712  000BB6  50DE               	movf	postinc2,w,c
  1713  000BB8  5CE6               	subwf	postinc1,w,c
  1714  000BBA  50E6               	movf	postinc1,w,c
  1715  000BBC  0A80               	xorlw	128
  1716  000BBE  6E09               	movwf	(??_fputc+4)^0,c
  1717  000BC0  50DE               	movf	postinc2,w,c
  1718  000BC2  0A80               	xorlw	128
  1719  000BC4  5809               	subwfb	(??_fputc+4)^0,w,c
  1720  000BC6  B0D8               	btfsc	status,0,c
  1721  000BC8  EFE8  F005         	goto	u511
  1722  000BCC  EFEA  F005         	goto	u510
  1723  000BD0                     u511:
  1724  000BD0  EFF3  F005         	goto	l810
  1725  000BD4                     u510:
  1726  000BD4                     l1129:
  1727  000BD4  EE20 F002          	lfsr	2,2
  1728  000BD8  5003               	movf	fputc@fp^0,w,c
  1729  000BDA  26D9               	addwf	fsr2l,f,c
  1730  000BDC  5004               	movf	(fputc@fp+1)^0,w,c
  1731  000BDE  22DA               	addwfc	fsr2h,f,c
  1732  000BE0  2ADE               	incf	postinc2,f,c
  1733  000BE2  0E00               	movlw	0
  1734  000BE4  22DD               	addwfc	postdec2,f,c
  1735  000BE6                     l810:
  1736  000BE6  0012               	return		;funcret
  1737  000BE8                     __end_of_fputc:
  1738                           	callstack 0
  1739                           
  1740 ;; *************** function _putch *****************
  1741 ;; Defined at:
  1742 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  c               1    wreg     unsigned char 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  c               1    0[COMRAM] unsigned char 
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1756 ;;      Params:         0       0       0       0
  1757 ;;      Locals:         0       0       0       0
  1758 ;;      Temps:          0       0       0       0
  1759 ;;      Totals:         0       0       0       0
  1760 ;;Total ram usage:        0 bytes
  1761 ;; Hardware stack levels used: 1
  1762 ;; This function calls:
  1763 ;;		Nothing
  1764 ;; This function is called by:
  1765 ;;		_fputc
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text9
  1770  000E4C                     __ptext9:
  1771                           	callstack 0
  1772  000E4C                     _putch:
  1773                           	callstack 26
  1774  000E4C  0012               	return		;funcret
  1775  000E4E                     __end_of_putch:
  1776                           	callstack 0
  1777                           
  1778 ;; *************** function _abs *****************
  1779 ;; Defined at:
  1780 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  a               2   18[COMRAM] int 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  2   18[COMRAM] int 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1794 ;;      Params:         2       0       0       0
  1795 ;;      Locals:         0       0       0       0
  1796 ;;      Temps:          2       0       0       0
  1797 ;;      Totals:         4       0       0       0
  1798 ;;Total ram usage:        4 bytes
  1799 ;; Hardware stack levels used: 1
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_dtoa
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text10
  1808  000CF4                     __ptext10:
  1809                           	callstack 0
  1810  000CF4                     _abs:
  1811                           	callstack 26
  1812  000CF4  BE14               	btfsc	(abs@a+1)^0,7,c
  1813  000CF6  EF87  F006         	goto	u710
  1814  000CFA  5014               	movf	(abs@a+1)^0,w,c
  1815  000CFC  E106               	bnz	u711
  1816  000CFE  0413               	decf	abs@a^0,w,c
  1817  000D00  B0D8               	btfsc	status,0,c
  1818  000D02  EF85  F006         	goto	u711
  1819  000D06  EF87  F006         	goto	u710
  1820  000D0A                     u711:
  1821  000D0A  EF95  F006         	goto	l795
  1822  000D0E                     u710:
  1823  000D0E  C013  F015         	movff	abs@a,??_abs
  1824  000D12  C014  F016         	movff	abs@a+1,??_abs+1
  1825  000D16  1E15               	comf	??_abs^0,f,c
  1826  000D18  1E16               	comf	(??_abs+1)^0,f,c
  1827  000D1A  4A15               	infsnz	??_abs^0,f,c
  1828  000D1C  2A16               	incf	(??_abs+1)^0,f,c
  1829  000D1E  C015  F013         	movff	??_abs,?_abs
  1830  000D22  C016  F014         	movff	??_abs+1,?_abs+1
  1831  000D26  EF99  F006         	goto	l798
  1832  000D2A                     l795:
  1833  000D2A  C013  F013         	movff	abs@a,?_abs
  1834  000D2E  C014  F014         	movff	abs@a+1,?_abs+1
  1835  000D32                     l798:
  1836  000D32  0012               	return		;funcret
  1837  000D34                     __end_of_abs:
  1838                           	callstack 0
  1839                           
  1840 ;; *************** function ___aomod *****************
  1841 ;; Defined at:
  1842 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  dividend        8    0[COMRAM] long long 
  1845 ;;  divisor         8    8[COMRAM] long long 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  sign            1   17[COMRAM] unsigned char 
  1848 ;;  counter         1   16[COMRAM] unsigned char 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  8    0[COMRAM] long long 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1858 ;;      Params:        16       0       0       0
  1859 ;;      Locals:         2       0       0       0
  1860 ;;      Temps:          0       0       0       0
  1861 ;;      Totals:        18       0       0       0
  1862 ;;Total ram usage:       18 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_dtoa
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text11
  1872  000928                     __ptext11:
  1873                           	callstack 0
  1874  000928                     ___aomod:
  1875                           	callstack 26
  1876  000928  0E00               	movlw	0
  1877  00092A  6E12               	movwf	___aomod@sign^0,c
  1878  00092C  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  1879  00092E  EF9D  F004         	goto	u610
  1880  000932  EF9B  F004         	goto	u611
  1881  000936                     u611:
  1882  000936  EFAF  F004         	goto	l1203
  1883  00093A                     u610:
  1884  00093A  1E08               	comf	(___aomod@dividend+7)^0,f,c
  1885  00093C  1E07               	comf	(___aomod@dividend+6)^0,f,c
  1886  00093E  1E06               	comf	(___aomod@dividend+5)^0,f,c
  1887  000940  1E05               	comf	(___aomod@dividend+4)^0,f,c
  1888  000942  1E04               	comf	(___aomod@dividend+3)^0,f,c
  1889  000944  1E03               	comf	(___aomod@dividend+2)^0,f,c
  1890  000946  1E02               	comf	(___aomod@dividend+1)^0,f,c
  1891  000948  6C01               	negf	___aomod@dividend^0,c
  1892  00094A  0E00               	movlw	0
  1893  00094C  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  1894  00094E  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  1895  000950  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  1896  000952  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  1897  000954  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  1898  000956  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  1899  000958  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  1900  00095A  0E01               	movlw	1
  1901  00095C  6E12               	movwf	___aomod@sign^0,c
  1902  00095E                     l1203:
  1903  00095E  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  1904  000960  EFB6  F004         	goto	u620
  1905  000964  EFB4  F004         	goto	u621
  1906  000968                     u621:
  1907  000968  EFC6  F004         	goto	l1207
  1908  00096C                     u620:
  1909  00096C  1E10               	comf	(___aomod@divisor+7)^0,f,c
  1910  00096E  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  1911  000970  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  1912  000972  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  1913  000974  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  1914  000976  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  1915  000978  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  1916  00097A  6C09               	negf	___aomod@divisor^0,c
  1917  00097C  0E00               	movlw	0
  1918  00097E  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  1919  000980  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  1920  000982  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  1921  000984  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  1922  000986  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  1923  000988  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  1924  00098A  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  1925  00098C                     l1207:
  1926  00098C  5009               	movf	___aomod@divisor^0,w,c
  1927  00098E  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  1928  000990  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  1929  000992  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  1930  000994  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  1931  000996  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  1932  000998  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  1933  00099A  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  1934  00099C  B4D8               	btfsc	status,2,c
  1935  00099E  EFD3  F004         	goto	u631
  1936  0009A2  EFD5  F004         	goto	u630
  1937  0009A6                     u631:
  1938  0009A6  EF1D  F005         	goto	l1223
  1939  0009AA                     u630:
  1940  0009AA  0E01               	movlw	1
  1941  0009AC  6E11               	movwf	___aomod@counter^0,c
  1942  0009AE  EFE3  F004         	goto	l1213
  1943  0009B2                     l1211:
  1944  0009B2  90D8               	bcf	status,0,c
  1945  0009B4  3609               	rlcf	___aomod@divisor^0,f,c
  1946  0009B6  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  1947  0009B8  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  1948  0009BA  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  1949  0009BC  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  1950  0009BE  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  1951  0009C0  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  1952  0009C2  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  1953  0009C4  2A11               	incf	___aomod@counter^0,f,c
  1954  0009C6                     l1213:
  1955  0009C6  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  1956  0009C8  EFE8  F004         	goto	u641
  1957  0009CC  EFEA  F004         	goto	u640
  1958  0009D0                     u641:
  1959  0009D0  EFD9  F004         	goto	l1211
  1960  0009D4                     u640:
  1961  0009D4                     l1215:
  1962  0009D4  5009               	movf	___aomod@divisor^0,w,c
  1963  0009D6  5C01               	subwf	___aomod@dividend^0,w,c
  1964  0009D8  500A               	movf	(___aomod@divisor+1)^0,w,c
  1965  0009DA  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  1966  0009DC  500B               	movf	(___aomod@divisor+2)^0,w,c
  1967  0009DE  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  1968  0009E0  500C               	movf	(___aomod@divisor+3)^0,w,c
  1969  0009E2  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  1970  0009E4  500D               	movf	(___aomod@divisor+4)^0,w,c
  1971  0009E6  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  1972  0009E8  500E               	movf	(___aomod@divisor+5)^0,w,c
  1973  0009EA  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  1974  0009EC  500F               	movf	(___aomod@divisor+6)^0,w,c
  1975  0009EE  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  1976  0009F0  5010               	movf	(___aomod@divisor+7)^0,w,c
  1977  0009F2  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  1978  0009F4  A0D8               	btfss	status,0,c
  1979  0009F6  EFFF  F004         	goto	u651
  1980  0009FA  EF01  F005         	goto	u650
  1981  0009FE                     u651:
  1982  0009FE  EF11  F005         	goto	l1219
  1983  000A02                     u650:
  1984  000A02  5009               	movf	___aomod@divisor^0,w,c
  1985  000A04  5E01               	subwf	___aomod@dividend^0,f,c
  1986  000A06  500A               	movf	(___aomod@divisor+1)^0,w,c
  1987  000A08  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  1988  000A0A  500B               	movf	(___aomod@divisor+2)^0,w,c
  1989  000A0C  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  1990  000A0E  500C               	movf	(___aomod@divisor+3)^0,w,c
  1991  000A10  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  1992  000A12  500D               	movf	(___aomod@divisor+4)^0,w,c
  1993  000A14  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  1994  000A16  500E               	movf	(___aomod@divisor+5)^0,w,c
  1995  000A18  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  1996  000A1A  500F               	movf	(___aomod@divisor+6)^0,w,c
  1997  000A1C  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  1998  000A1E  5010               	movf	(___aomod@divisor+7)^0,w,c
  1999  000A20  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2000  000A22                     l1219:
  2001  000A22  90D8               	bcf	status,0,c
  2002  000A24  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2003  000A26  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2004  000A28  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2005  000A2A  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2006  000A2C  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2007  000A2E  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2008  000A30  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2009  000A32  3209               	rrcf	___aomod@divisor^0,f,c
  2010  000A34  2E11               	decfsz	___aomod@counter^0,f,c
  2011  000A36  EFEA  F004         	goto	l1215
  2012  000A3A                     l1223:
  2013  000A3A  5012               	movf	___aomod@sign^0,w,c
  2014  000A3C  B4D8               	btfsc	status,2,c
  2015  000A3E  EF23  F005         	goto	u661
  2016  000A42  EF25  F005         	goto	u660
  2017  000A46                     u661:
  2018  000A46  EF35  F005         	goto	l1227
  2019  000A4A                     u660:
  2020  000A4A  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2021  000A4C  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2022  000A4E  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2023  000A50  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2024  000A52  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2025  000A54  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2026  000A56  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2027  000A58  6C01               	negf	___aomod@dividend^0,c
  2028  000A5A  0E00               	movlw	0
  2029  000A5C  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2030  000A5E  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2031  000A60  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2032  000A62  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2033  000A64  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2034  000A66  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2035  000A68  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2036  000A6A                     l1227:
  2037  000A6A  C001  F001         	movff	___aomod@dividend,?___aomod
  2038  000A6E  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2039  000A72  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2040  000A76  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2041  000A7A  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2042  000A7E  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2043  000A82  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2044  000A86  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2045  000A8A  0012               	return		;funcret
  2046  000A8C                     __end_of___aomod:
  2047                           	callstack 0
  2048                           
  2049 ;; *************** function ___aodiv *****************
  2050 ;; Defined at:
  2051 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  dividend        8    0[COMRAM] long long 
  2054 ;;  divisor         8    8[COMRAM] long long 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  quotient        8   18[COMRAM] long long 
  2057 ;;  sign            1   17[COMRAM] unsigned char 
  2058 ;;  counter         1   16[COMRAM] unsigned char 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  8    0[COMRAM] long long 
  2061 ;; Registers used:
  2062 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2068 ;;      Params:        16       0       0       0
  2069 ;;      Locals:        10       0       0       0
  2070 ;;      Temps:          0       0       0       0
  2071 ;;      Totals:        26       0       0       0
  2072 ;;Total ram usage:       26 bytes
  2073 ;; Hardware stack levels used: 1
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_dtoa
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text12
  2082  0007A0                     __ptext12:
  2083                           	callstack 0
  2084  0007A0                     ___aodiv:
  2085                           	callstack 26
  2086  0007A0  0E00               	movlw	0
  2087  0007A2  6E12               	movwf	___aodiv@sign^0,c
  2088  0007A4  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2089  0007A6  EFD9  F003         	goto	u540
  2090  0007AA  EFD7  F003         	goto	u541
  2091  0007AE                     u541:
  2092  0007AE  EFEB  F003         	goto	l1159
  2093  0007B2                     u540:
  2094  0007B2  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2095  0007B4  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2096  0007B6  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2097  0007B8  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2098  0007BA  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2099  0007BC  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2100  0007BE  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2101  0007C0  6C09               	negf	___aodiv@divisor^0,c
  2102  0007C2  0E00               	movlw	0
  2103  0007C4  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2104  0007C6  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2105  0007C8  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2106  0007CA  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2107  0007CC  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2108  0007CE  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2109  0007D0  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2110  0007D2  0E01               	movlw	1
  2111  0007D4  6E12               	movwf	___aodiv@sign^0,c
  2112  0007D6                     l1159:
  2113  0007D6  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2114  0007D8  EFF2  F003         	goto	u550
  2115  0007DC  EFF0  F003         	goto	u551
  2116  0007E0                     u551:
  2117  0007E0  EF04  F004         	goto	l1165
  2118  0007E4                     u550:
  2119  0007E4  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2120  0007E6  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2121  0007E8  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2122  0007EA  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2123  0007EC  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2124  0007EE  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2125  0007F0  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2126  0007F2  6C01               	negf	___aodiv@dividend^0,c
  2127  0007F4  0E00               	movlw	0
  2128  0007F6  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2129  0007F8  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2130  0007FA  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2131  0007FC  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2132  0007FE  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2133  000800  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2134  000802  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2135  000804  0E01               	movlw	1
  2136  000806  1A12               	xorwf	___aodiv@sign^0,f,c
  2137  000808                     l1165:
  2138  000808  EE20  F013         	lfsr	2,___aodiv@quotient
  2139  00080C  0E07               	movlw	7
  2140  00080E                     u561:
  2141  00080E  6ADE               	clrf	postinc2,c
  2142  000810  06E8               	decf	wreg,f,c
  2143  000812  E2FD               	bc	u561
  2144  000814  5009               	movf	___aodiv@divisor^0,w,c
  2145  000816  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2146  000818  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2147  00081A  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2148  00081C  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2149  00081E  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2150  000820  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2151  000822  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2152  000824  B4D8               	btfsc	status,2,c
  2153  000826  EF17  F004         	goto	u571
  2154  00082A  EF19  F004         	goto	u570
  2155  00082E                     u571:
  2156  00082E  EF6B  F004         	goto	l1187
  2157  000832                     u570:
  2158  000832  0E01               	movlw	1
  2159  000834  6E11               	movwf	___aodiv@counter^0,c
  2160  000836  EF27  F004         	goto	l1173
  2161  00083A                     l1171:
  2162  00083A  90D8               	bcf	status,0,c
  2163  00083C  3609               	rlcf	___aodiv@divisor^0,f,c
  2164  00083E  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2165  000840  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2166  000842  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2167  000844  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2168  000846  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2169  000848  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2170  00084A  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2171  00084C  2A11               	incf	___aodiv@counter^0,f,c
  2172  00084E                     l1173:
  2173  00084E  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2174  000850  EF2C  F004         	goto	u581
  2175  000854  EF2E  F004         	goto	u580
  2176  000858                     u581:
  2177  000858  EF1D  F004         	goto	l1171
  2178  00085C                     u580:
  2179  00085C                     l1175:
  2180  00085C  90D8               	bcf	status,0,c
  2181  00085E  3613               	rlcf	___aodiv@quotient^0,f,c
  2182  000860  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2183  000862  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2184  000864  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2185  000866  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2186  000868  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2187  00086A  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2188  00086C  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2189  00086E  5009               	movf	___aodiv@divisor^0,w,c
  2190  000870  5C01               	subwf	___aodiv@dividend^0,w,c
  2191  000872  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2192  000874  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2193  000876  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2194  000878  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2195  00087A  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2196  00087C  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2197  00087E  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2198  000880  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2199  000882  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2200  000884  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2201  000886  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2202  000888  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2203  00088A  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2204  00088C  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2205  00088E  A0D8               	btfss	status,0,c
  2206  000890  EF4C  F004         	goto	u591
  2207  000894  EF4E  F004         	goto	u590
  2208  000898                     u591:
  2209  000898  EF5F  F004         	goto	l1183
  2210  00089C                     u590:
  2211  00089C  5009               	movf	___aodiv@divisor^0,w,c
  2212  00089E  5E01               	subwf	___aodiv@dividend^0,f,c
  2213  0008A0  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2214  0008A2  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2215  0008A4  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2216  0008A6  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2217  0008A8  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2218  0008AA  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2219  0008AC  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2220  0008AE  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2221  0008B0  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2222  0008B2  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2223  0008B4  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2224  0008B6  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2225  0008B8  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2226  0008BA  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2227  0008BC  8013               	bsf	___aodiv@quotient^0,0,c
  2228  0008BE                     l1183:
  2229  0008BE  90D8               	bcf	status,0,c
  2230  0008C0  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2231  0008C2  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2232  0008C4  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2233  0008C6  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2234  0008C8  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2235  0008CA  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2236  0008CC  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2237  0008CE  3209               	rrcf	___aodiv@divisor^0,f,c
  2238  0008D0  2E11               	decfsz	___aodiv@counter^0,f,c
  2239  0008D2  EF2E  F004         	goto	l1175
  2240  0008D6                     l1187:
  2241  0008D6  5012               	movf	___aodiv@sign^0,w,c
  2242  0008D8  B4D8               	btfsc	status,2,c
  2243  0008DA  EF71  F004         	goto	u601
  2244  0008DE  EF73  F004         	goto	u600
  2245  0008E2                     u601:
  2246  0008E2  EF83  F004         	goto	l1191
  2247  0008E6                     u600:
  2248  0008E6  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2249  0008E8  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2250  0008EA  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2251  0008EC  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2252  0008EE  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2253  0008F0  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2254  0008F2  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2255  0008F4  6C13               	negf	___aodiv@quotient^0,c
  2256  0008F6  0E00               	movlw	0
  2257  0008F8  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2258  0008FA  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2259  0008FC  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2260  0008FE  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2261  000900  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2262  000902  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2263  000904  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2264  000906                     l1191:
  2265  000906  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2266  00090A  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2267  00090E  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2268  000912  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2269  000916  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2270  00091A  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2271  00091E  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2272  000922  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2273  000926  0012               	return		;funcret
  2274  000928                     __end_of___aodiv:
  2275                           	callstack 0
  2276                           
  2277 ;; *************** function _bitWrite *****************
  2278 ;; Defined at:
  2279 ;;		line 19 in file "mylib.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  number          2    7[COMRAM] PTR unsigned char 
  2282 ;;		 -> main@a(1), 
  2283 ;;  b               1    9[COMRAM] unsigned char 
  2284 ;;  val             1   10[COMRAM] unsigned char 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      void 
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2296 ;;      Params:         4       0       0       0
  2297 ;;      Locals:         0       0       0       0
  2298 ;;      Temps:          0       0       0       0
  2299 ;;      Totals:         4       0       0       0
  2300 ;;Total ram usage:        4 bytes
  2301 ;; Hardware stack levels used: 1
  2302 ;; Hardware stack levels required when called: 2
  2303 ;; This function calls:
  2304 ;;		_bitClear
  2305 ;;		_bitSet
  2306 ;; This function is called by:
  2307 ;;		_main
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text13
  2312  000D6A                     __ptext13:
  2313                           	callstack 0
  2314  000D6A                     _bitWrite:
  2315                           	callstack 28
  2316  000D6A                     
  2317                           ;mylib.c: 20:     val ? bitSet(number, b) : bitClear(number, b);
  2318  000D6A  500B               	movf	bitWrite@val^0,w,c
  2319  000D6C  B4D8               	btfsc	status,2,c
  2320  000D6E  EFBB  F006         	goto	u931
  2321  000D72  EFBD  F006         	goto	u930
  2322  000D76                     u931:
  2323  000D76  EFC7  F006         	goto	l1381
  2324  000D7A                     u930:
  2325  000D7A  C008  F004         	movff	bitWrite@number,bitSet@number
  2326  000D7E  C009  F005         	movff	bitWrite@number+1,bitSet@number+1
  2327  000D82  C00A  F006         	movff	bitWrite@b,bitSet@b
  2328  000D86  EC1B  F007         	call	_bitSet	;wreg free
  2329  000D8A  EFCF  F006         	goto	l19
  2330  000D8E                     l1381:
  2331  000D8E  C008  F004         	movff	bitWrite@number,bitClear@number
  2332  000D92  C009  F005         	movff	bitWrite@number+1,bitClear@number+1
  2333  000D96  C00A  F006         	movff	bitWrite@b,bitClear@b
  2334  000D9A  EC0F  F007         	call	_bitClear	;wreg free
  2335  000D9E                     l19:
  2336  000D9E  0012               	return		;funcret
  2337  000DA0                     __end_of_bitWrite:
  2338                           	callstack 0
  2339                           
  2340 ;; *************** function _bitSet *****************
  2341 ;; Defined at:
  2342 ;;		line 15 in file "mylib.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  number          2    3[COMRAM] PTR unsigned char 
  2345 ;;		 -> main@a(1), 
  2346 ;;  b               1    5[COMRAM] unsigned char 
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;		None
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  1    wreg      void 
  2351 ;; Registers used:
  2352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2358 ;;      Params:         3       0       0       0
  2359 ;;      Locals:         0       0       0       0
  2360 ;;      Temps:          1       0       0       0
  2361 ;;      Totals:         4       0       0       0
  2362 ;;Total ram usage:        4 bytes
  2363 ;; Hardware stack levels used: 1
  2364 ;; Hardware stack levels required when called: 1
  2365 ;; This function calls:
  2366 ;;		_bitValue
  2367 ;; This function is called by:
  2368 ;;		_bitWrite
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           	psect	text14
  2373  000E36                     __ptext14:
  2374                           	callstack 0
  2375  000E36                     _bitSet:
  2376                           	callstack 28
  2377  000E36                     
  2378                           ;mylib.c: 16:     *number |= bitValue(b);
  2379  000E36  5006               	movf	bitSet@b^0,w,c
  2380  000E38  ECF3  F006         	call	_bitValue
  2381  000E3C  6E07               	movwf	??_bitSet^0,c
  2382  000E3E  C004  FFD9         	movff	bitSet@number,fsr2l
  2383  000E42  C005  FFDA         	movff	bitSet@number+1,fsr2h
  2384  000E46  5007               	movf	??_bitSet^0,w,c
  2385  000E48  12DF               	iorwf	indf2,f,c
  2386  000E4A  0012               	return		;funcret
  2387  000E4C                     __end_of_bitSet:
  2388                           	callstack 0
  2389                           
  2390 ;; *************** function _bitClear *****************
  2391 ;; Defined at:
  2392 ;;		line 7 in file "mylib.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  number          2    3[COMRAM] PTR unsigned char 
  2395 ;;		 -> main@a(1), 
  2396 ;;  b               1    5[COMRAM] unsigned char 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;		None
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2408 ;;      Params:         3       0       0       0
  2409 ;;      Locals:         0       0       0       0
  2410 ;;      Temps:          1       0       0       0
  2411 ;;      Totals:         4       0       0       0
  2412 ;;Total ram usage:        4 bytes
  2413 ;; Hardware stack levels used: 1
  2414 ;; Hardware stack levels required when called: 1
  2415 ;; This function calls:
  2416 ;;		_bitValue
  2417 ;; This function is called by:
  2418 ;;		_bitWrite
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text15
  2423  000E1E                     __ptext15:
  2424                           	callstack 0
  2425  000E1E                     _bitClear:
  2426                           	callstack 28
  2427  000E1E                     
  2428                           ;mylib.c: 8:     *number &= ~bitValue(b);
  2429  000E1E  5006               	movf	bitClear@b^0,w,c
  2430  000E20  ECF3  F006         	call	_bitValue
  2431  000E24  0AFF               	xorlw	255
  2432  000E26  6E07               	movwf	??_bitClear^0,c
  2433  000E28  C004  FFD9         	movff	bitClear@number,fsr2l
  2434  000E2C  C005  FFDA         	movff	bitClear@number+1,fsr2h
  2435  000E30  5007               	movf	??_bitClear^0,w,c
  2436  000E32  16DF               	andwf	indf2,f,c
  2437  000E34  0012               	return		;funcret
  2438  000E36                     __end_of_bitClear:
  2439                           	callstack 0
  2440                           
  2441 ;; *************** function _bitValue *****************
  2442 ;; Defined at:
  2443 ;;		line 3 in file "mylib.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;  b               1    wreg     unsigned char 
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  b               1    2[COMRAM] unsigned char 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      unsigned char 
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, status,0
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2457 ;;      Params:         0       0       0       0
  2458 ;;      Locals:         1       0       0       0
  2459 ;;      Temps:          2       0       0       0
  2460 ;;      Totals:         3       0       0       0
  2461 ;;Total ram usage:        3 bytes
  2462 ;; Hardware stack levels used: 1
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_bitClear
  2467 ;;		_bitSet
  2468 ;;		_main
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text16
  2473  000DE6                     __ptext16:
  2474                           	callstack 0
  2475  000DE6                     _bitValue:
  2476                           	callstack 28
  2477                           
  2478                           ;incstack = 0
  2479                           ;bitValue@b stored from wreg
  2480  000DE6  6E03               	movwf	bitValue@b^0,c
  2481  000DE8                     
  2482                           ;mylib.c: 4:     return 1 << b;
  2483  000DE8  C003  F001         	movff	bitValue@b,??_bitValue
  2484  000DEC  0E01               	movlw	1
  2485  000DEE  6E02               	movwf	(??_bitValue+1)^0,c
  2486  000DF0  2A01               	incf	??_bitValue^0,f,c
  2487  000DF2  EFFD  F006         	goto	u404
  2488  000DF6                     u405:
  2489  000DF6  90D8               	bcf	status,0,c
  2490  000DF8  3602               	rlcf	(??_bitValue+1)^0,f,c
  2491  000DFA                     u404:
  2492  000DFA  2E01               	decfsz	??_bitValue^0,f,c
  2493  000DFC  EFFB  F006         	goto	u405
  2494  000E00  5002               	movf	(??_bitValue+1)^0,w,c
  2495  000E02  0012               	return		;funcret
  2496  000E04                     __end_of_bitValue:
  2497                           	callstack 0
  2498                           
  2499 ;; *************** function _bitRead *****************
  2500 ;; Defined at:
  2501 ;;		line 11 in file "mylib.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  number          1    wreg     unsigned char 
  2504 ;;  b               1    0[COMRAM] unsigned char 
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  number          1    3[COMRAM] unsigned char 
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      unsigned char 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2516 ;;      Params:         1       0       0       0
  2517 ;;      Locals:         1       0       0       0
  2518 ;;      Temps:          2       0       0       0
  2519 ;;      Totals:         4       0       0       0
  2520 ;;Total ram usage:        4 bytes
  2521 ;; Hardware stack levels used: 1
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text17
  2530  000DC6                     __ptext17:
  2531                           	callstack 0
  2532  000DC6                     _bitRead:
  2533                           	callstack 30
  2534                           
  2535                           ;incstack = 0
  2536                           ;bitRead@number stored from wreg
  2537  000DC6  6E04               	movwf	bitRead@number^0,c
  2538  000DC8                     
  2539                           ;mylib.c: 12:     return (number >> b) & 0x01;
  2540  000DC8  C001  F002         	movff	bitRead@b,??_bitRead
  2541  000DCC  C004  F003         	movff	bitRead@number,??_bitRead+1
  2542  000DD0  2A02               	incf	??_bitRead^0,f,c
  2543  000DD2  EFED  F006         	goto	u924
  2544  000DD6                     u925:
  2545  000DD6  90D8               	bcf	status,0,c
  2546  000DD8  3203               	rrcf	(??_bitRead+1)^0,f,c
  2547  000DDA                     u924:
  2548  000DDA  2E02               	decfsz	??_bitRead^0,f,c
  2549  000DDC  EFEB  F006         	goto	u925
  2550  000DE0  5003               	movf	(??_bitRead+1)^0,w,c
  2551  000DE2  0B01               	andlw	1
  2552  000DE4  0012               	return		;funcret
  2553  000DE6                     __end_of_bitRead:
  2554                           	callstack 0
  2555                           
  2556                           	psect	rparam
  2557  0000                     
  2558                           	psect	idloc
  2559                           
  2560                           ;Config register IDLOC0 @ 0x200000
  2561                           ;	unspecified, using default values
  2562  200000                     	org	2097152
  2563  200000  FF                 	db	255
  2564                           
  2565                           ;Config register IDLOC1 @ 0x200001
  2566                           ;	unspecified, using default values
  2567  200001                     	org	2097153
  2568  200001  FF                 	db	255
  2569                           
  2570                           ;Config register IDLOC2 @ 0x200002
  2571                           ;	unspecified, using default values
  2572  200002                     	org	2097154
  2573  200002  FF                 	db	255
  2574                           
  2575                           ;Config register IDLOC3 @ 0x200003
  2576                           ;	unspecified, using default values
  2577  200003                     	org	2097155
  2578  200003  FF                 	db	255
  2579                           
  2580                           ;Config register IDLOC4 @ 0x200004
  2581                           ;	unspecified, using default values
  2582  200004                     	org	2097156
  2583  200004  FF                 	db	255
  2584                           
  2585                           ;Config register IDLOC5 @ 0x200005
  2586                           ;	unspecified, using default values
  2587  200005                     	org	2097157
  2588  200005  FF                 	db	255
  2589                           
  2590                           ;Config register IDLOC6 @ 0x200006
  2591                           ;	unspecified, using default values
  2592  200006                     	org	2097158
  2593  200006  FF                 	db	255
  2594                           
  2595                           ;Config register IDLOC7 @ 0x200007
  2596                           ;	unspecified, using default values
  2597  200007                     	org	2097159
  2598  200007  FF                 	db	255
  2599                           
  2600                           	psect	config
  2601                           
  2602                           ; Padding undefined space
  2603  300000                     	org	3145728
  2604  300000  FF                 	db	255
  2605                           
  2606                           ;Config register CONFIG1H @ 0x300001
  2607                           ;	unspecified, using default values
  2608                           ;	Oscillator Selection bits
  2609                           ;	FOSC = 0x5, unprogrammed default
  2610                           ;	4X PLL Enable
  2611                           ;	PLLCFG = 0x0, unprogrammed default
  2612                           ;	Primary clock enable bit
  2613                           ;	PRICLKEN = 0x1, unprogrammed default
  2614                           ;	Fail-Safe Clock Monitor Enable bit
  2615                           ;	FCMEN = 0x0, unprogrammed default
  2616                           ;	Internal/External Oscillator Switchover bit
  2617                           ;	IESO = 0x0, unprogrammed default
  2618  300001                     	org	3145729
  2619  300001  25                 	db	37
  2620                           
  2621                           ;Config register CONFIG2L @ 0x300002
  2622                           ;	unspecified, using default values
  2623                           ;	Power-up Timer Enable bit
  2624                           ;	PWRTEN = 0x1, unprogrammed default
  2625                           ;	Brown-out Reset Enable bits
  2626                           ;	BOREN = 0x3, unprogrammed default
  2627                           ;	Brown Out Reset Voltage bits
  2628                           ;	BORV = 0x3, unprogrammed default
  2629  300002                     	org	3145730
  2630  300002  1F                 	db	31
  2631                           
  2632                           ;Config register CONFIG2H @ 0x300003
  2633                           ;	unspecified, using default values
  2634                           ;	Watchdog Timer Enable bits
  2635                           ;	WDTEN = 0x3, unprogrammed default
  2636                           ;	Watchdog Timer Postscale Select bits
  2637                           ;	WDTPS = 0xF, unprogrammed default
  2638  300003                     	org	3145731
  2639  300003  3F                 	db	63
  2640                           
  2641                           ; Padding undefined space
  2642  300004                     	org	3145732
  2643  300004  FF                 	db	255
  2644                           
  2645                           ;Config register CONFIG3H @ 0x300005
  2646                           ;	unspecified, using default values
  2647                           ;	CCP2 MUX bit
  2648                           ;	CCP2MX = 0x1, unprogrammed default
  2649                           ;	PORTB A/D Enable bit
  2650                           ;	PBADEN = 0x1, unprogrammed default
  2651                           ;	P3A/CCP3 Mux bit
  2652                           ;	CCP3MX = 0x1, unprogrammed default
  2653                           ;	HFINTOSC Fast Start-up
  2654                           ;	HFOFST = 0x1, unprogrammed default
  2655                           ;	Timer3 Clock input mux bit
  2656                           ;	T3CMX = 0x1, unprogrammed default
  2657                           ;	ECCP2 B output mux bit
  2658                           ;	P2BMX = 0x1, unprogrammed default
  2659                           ;	MCLR Pin Enable bit
  2660                           ;	MCLRE = 0x1, unprogrammed default
  2661  300005                     	org	3145733
  2662  300005  BF                 	db	191
  2663                           
  2664                           ;Config register CONFIG4L @ 0x300006
  2665                           ;	unspecified, using default values
  2666                           ;	Stack Full/Underflow Reset Enable bit
  2667                           ;	STVREN = 0x1, unprogrammed default
  2668                           ;	Single-Supply ICSP Enable bit
  2669                           ;	LVP = 0x1, unprogrammed default
  2670                           ;	Extended Instruction Set Enable bit
  2671                           ;	XINST = 0x0, unprogrammed default
  2672                           ;	Background Debug
  2673                           ;	DEBUG = 0x1, unprogrammed default
  2674  300006                     	org	3145734
  2675  300006  85                 	db	133
  2676                           
  2677                           ; Padding undefined space
  2678  300007                     	org	3145735
  2679  300007  FF                 	db	255
  2680                           
  2681                           ;Config register CONFIG5L @ 0x300008
  2682                           ;	unspecified, using default values
  2683                           ;	Code Protection Block 0
  2684                           ;	CP0 = 0x1, unprogrammed default
  2685                           ;	Code Protection Block 1
  2686                           ;	CP1 = 0x1, unprogrammed default
  2687  300008                     	org	3145736
  2688  300008  03                 	db	3
  2689                           
  2690                           ;Config register CONFIG5H @ 0x300009
  2691                           ;	unspecified, using default values
  2692                           ;	Boot Block Code Protection bit
  2693                           ;	CPB = 0x1, unprogrammed default
  2694                           ;	Data EEPROM Code Protection bit
  2695                           ;	CPD = 0x1, unprogrammed default
  2696  300009                     	org	3145737
  2697  300009  C0                 	db	192
  2698                           
  2699                           ;Config register CONFIG6L @ 0x30000A
  2700                           ;	unspecified, using default values
  2701                           ;	Write Protection Block 0
  2702                           ;	WRT0 = 0x1, unprogrammed default
  2703                           ;	Write Protection Block 1
  2704                           ;	WRT1 = 0x1, unprogramm  2705  30000A                     	org	3145738
  2706  30000A  03                 	db	3
  2707                           
  2708                           ;Config register CONFIG6H @ 0x30000B
  2709                           ;	unspecified, using default values
  2710                           ;	Configuration Register Write Protection bit
  2711                           ;	WRTC = 0x1, unprogrammed default
  2712                           ;	Boot Block Write Protection bit
  2713                           ;	WRTB = 0x1, unprogrammed default
  2714                           ;	Data EEPROM Write Protection bit
  2715                           ;	WRTD = 0x1, unprogrammed default
  2716  30000B                     	org	3145739
  2717  30000B  E0                 	db	224
  2718                           
  2719                           ;Config register CONFIG7L @ 0x30000C
  2720                           ;	unspecified, using default values
  2721                           ;	Table Read Protection Block 0
  2722                           ;	EBTR0 = 0x1, unprogrammed default
  2723                           ;	Table Read Protection Block 1
  2724                           ;	EBTR1 = 0x1, unprogrammed default
  2725  30000C                     	org	3145740
  2726  30000C  03                 	db	3
  2727                           
  2728                           ;Config register CONFIG7H @ 0x30000D
  2729                           ;	unspecified, using default values
  2730                           ;	Boot Block Table Read Protection bit
  2731                           ;	EBTRB = 0x1, unprogrammed default
  2732  30000D                     	org	3145741
  2733  30000D  40                 	db	64
  2734                           tosu	equ	0xFFF
  2735                           tosh	equ	0xFFE
  2736                           tosl	equ	0xFFD
  2737                           stkptr	equ	0xFFC
  2738                           pclatu	equ	0xFFB
  2739                           pclath	equ	0xFFA
  2740                           pcl	equ	0xFF9
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           prodh	equ	0xFF4
  2746                           prodl	equ	0xFF3
  2747                           indf0	equ	0xFEF
  2748                           postinc0	equ	0xFEE
  2749                           postdec0	equ	0xFED
  2750                           preinc0	equ	0xFEC
  2751                           plusw0	equ	0xFEB
  2752                           fsr0h	equ	0xFEA
  2753                           fsr0l	equ	0xFE9
  2754                           wreg	equ	0xFE8
  2755                           indf1	equ	0xFE7
  2756                           postinc1	equ	0xFE6
  2757                           postdec1	equ	0xFE5
  2758                           preinc1	equ	0xFE4
  2759                           plusw1	equ	0xFE3
  2760                           fsr1h	equ	0xFE2
  2761                           fsr1l	equ	0xFE1
  2762                           bsr	equ	0xFE0
  2763                           indf2	equ	0xFDF
  2764                           postinc2	equ	0xFDE
  2765                           postdec2	equ	0xFDD
  2766                           preinc2	equ	0xFDC
  2767                           plusw2	equ	0xFDB
  2768                           fsr2h	equ	0xFDA
  2769                           fsr2l	equ	0xFD9
  2770                           status	equ	0xFD8

Data Sizes:
    Strings     7
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160      5      45
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S518_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[3]), STR_2(CODE[4]), STR_1(CODE[4]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[3]), STR_2(CODE[4]), STR_1(CODE[4]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[3]), STR_2(CODE[4]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    bitWrite@number	PTR unsigned char  size(2) Largest target is 1
		 -> main@a(COMRAM[1]), 

    bitSet@number	PTR unsigned char  size(2) Largest target is 1
		 -> main@a(COMRAM[1]), 

    bitClear@number	PTR unsigned char  size(2) Largest target is 1
		 -> main@a(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _bitWrite->_bitClear
    _bitWrite->_bitSet
    _bitSet->_bitValue
    _bitClear->_bitValue

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5    7133
                                             93 COMRAM     2     2      0
                                              0 BANK0      5     0      5
                            _bitRead
                           _bitValue
                           _bitWrite
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    6189
                                             87 COMRAM     6     2      4
                            _bitRead (ARG)
                           _bitValue (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5907
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5553
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4226
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2577
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1169
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     768
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _bitWrite                                             4     0      4     760
                                              7 COMRAM     4     0      4
                           _bitClear
                             _bitSet
 ---------------------------------------------------------------------------------
 (2) _bitSet                                               4     1      3     211
                                              3 COMRAM     4     1      3
                           _bitValue
 ---------------------------------------------------------------------------------
 (2) _bitClear                                             4     1      3     211
                                              3 COMRAM     4     1      3
                           _bitValue
 ---------------------------------------------------------------------------------
 (3) _bitValue                                             3     3      0      15
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _bitRead                                              4     3      1     120
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bitRead
   _bitValue
   _bitWrite
     _bitClear
       _bitValue
     _bitSet
       _bitValue
   _printf
     _bitRead (ARG)
     _bitValue (ARG)
     _vfprintf (ARG)
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      5      2D       4       28.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8C       8        0.0%
DATA                 0      0      8C      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Mar 29 14:37:43 2021

                      l3 0E02                        l6 0E34                        l9 0DE4  
                     l12 0E4A                       l19 0D9E                       l38 0C4A  
                    l155 0926                      l168 0A8A                      l810 0BE6  
                    l821 0E4C                      l751 0B50                      l719 0DC4  
                    l818 0CF2                      l746 0AD2                      l827 0D68  
                    l749 0B14                      l757 03AA                      l790 0CA6  
                    l759 03B2                      l791 0CAE                      l784 079E  
                    l777 05EA                      l795 0D2A                      l798 0D32  
                    u404 0DFA                      u500 0B9E                      u405 0DF6  
                    u501 0B9A                      u510 0BD4                      u511 0BD0  
                    u600 08E6                      u520 0CF2                      u601 08E2  
                    u521 0CEE                      u610 093A                      u530 0D5C  
                    u611 0936                      u531 0D58                      u540 07B2  
                    u620 096C                      u700 0B24                      u541 07AE  
                    u621 0968                      u701 0B20                      u550 07E4  
                    u630 09AA                      u710 0D0E                      u551 07E0  
                    u631 09A6                      u711 0D0A                      u640 09D4  
                    u480 0B64                      u800 0520                      u720 033A  
                    u561 080E                      u641 09D0                      u481 0B60  
                    u801 051C                      u721 0334                      u570 0832  
                    u650 0A02                      u490 0B76                      u810 053A  
                    u730 033C                      u571 082E                      u651 09FE  
                    u491 0B72                      u811 0536                      u580 085C  
                    u660 0A4A                      u820 0554                      u740 0352  
                    u900 0720                      u581 0858                      u661 0A46  
                    u821 0550                      u741 034E                      u901 071C  
                    u590 089C                      u670 0A9C                      u830 0564  
                    u750 0382                      u910 0CA6                      u591 0898  
                    u671 0A98                      u831 0560                      u751 037E  
                    u911 0CA2                      u680 0ABE                      u840 0576  
                    u760 039E                      u681 0ABA                      u841 0572  
                    u761 039A                      u930 0D7A                      u690 0B14  
                    u850 0586                      u770 03CC                      u931 0D76  
                    u691 0B10                      u851 0582                      u771 03C8  
                    u924 0DDA                      u860 059E                      u780 03DA  
                    u925 0DD6                      u861 059A                      u781 03D6  
                    u790 0502                      u870 0610                      u791 04FE  
                    u871 060C                      u880 0658                      u881 0654  
                    u890 067C                      u891 0678                      _abs 0CF4  
                    _pad 0A8C                      wreg 000FE8                     l1201 095A  
                   l1121 0B64                     l1211 09B2                     l1203 095E  
                   l1123 0B76                     ?_abs 0013                     l1029 0DE8  
                   l1221 0A34                     l1213 09C6                     l1205 096C  
                   l1125 0B80                     l1133 0CB0                     l1141 0D34  
                   l1301 0564                     l1151 07A0                     l1215 09D4  
                   l1223 0A3A                     l1207 098C                     l1127 0B9E  
                   l1119 0B52                     l1135 0CBC                     l1143 0D40  
                   l1231 0A8C                     l1311 05AA                     l1303 0576  
                   l1161 07E4                     l1153 07A4                     l1225 0A4A  
                   l1217 0A02                     l1209 09AA                     l1129 0BD4  
                   l1137 0CCE                     l1145 0D44                     l1241 0ADE  
                   l1233 0A9C                     l1313 05B2                     l1305 0586  
                   l1321 0610                     l1171 083A                     l1163 0804  
                   l1155 07B2                     l1227 0A6A                     l1219 0A22  
                   l1139 0CD2                     l1147 0D5C                     l1243 0AF2  
                   l1235 0AB0                     l1307 058C                     l1315 05C2  
                   l1331 067C                     l1323 061E                     l1181 08BC  
                   l1173 084E                     l1165 0808                     l1157 07D2  
                   l1253 0CF4                     l1245 0AF6                     l1237 0ABE  
                   l1309 059E                     l1261 0352                     l1341 072E  
                   l1333 06C4                     l1325 0630                     l1191 0906  
                   l1183 08BE                     l1175 085C                     l1167 0814  
                   l1159 07D6                     l1255 0D0E                     l1247 0B24  
                   l1239 0ACA                     l1271 03BA                     l1263 0372  
                   l1343 0742                     l1327 0634                     l1319 05EC  
                   l1361 0E1E                     l1185 08D0                     l1177 086E  
                   l1169 0832                     l1249 0B38                     l1281 03F0  
                   l1273 03CC                     l1265 0382                     l1257 030A  
                   l1337 06FC                     l1329 0658                     l1353 0768  
                   l1363 0E36                     l1179 089C                     l1187 08D6  
                   l1195 0928                     l1283 03F6                     l1291 04E8  
                   l1275 03DA                     l1267 0384                     l1259 032A  
                   l1355 078C                     l1339 0720                     l1347 074E  
                   l1371 0C8A                     l1373 0DC8                     l1381 0D8E  
                   l1189 08E6                     l1197 092C                     l1293 0502  
                   l1285 0478                     l1277 03E0                     l1269 039E  
                   l1349 075C                     l1365 0C4E                     l1199 093A  
                   l1295 0520                     l1287 047E                     l1279 03E8  
                   l1367 0C56                     l1383 0DA0                     l1391 0C02  
                   l1377 0D6A                     l1297 053A                     l1289 0484  
                   l1369 0C64                     l1385 0DA8                     l1393 0C06  
                   l1379 0D7A                     l1299 0554                     l1395 0C1A  
                   l1397 0C2C                     l1389 0BE8                     ?_pad 0011  
                   STR_1 0301                     STR_2 0301                     STR_3 0305  
                   abs@a 0013                     _dbuf 0068                     _main 0BE8  
                   _dtoa 030A                     _prec 0064                     _nout 0060  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001A                     fsr2l 000FD9                     start 0000  
           ___param_bank 000000                    ??_abs 0015                    ??_pad 0017  
        __end_of___aodiv 0928                    ?_main 0088                    ?_dtoa 001C  
        __end_of___aomod 0A8C             vfpfcnvrt@fmt 0042          __end_of_bitRead 0DE6  
                  _flags 0066                    _fputc 0B52                    _fputs 0CB0  
                  pad@fp 0011                    _width 0062                    _putch 0E4C  
                  main@a 005F                    dtoa@d 001E                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0030                    dtoa@s 0034  
                  dtoa@w 0032                    tablat 000FF5                    status 000FD8  
        __initialization 0E04             __end_of_main 0C4E             __end_of_dtoa 05EC  
                 ??_main 005E                   ??_dtoa 0026            __activetblptr 000001  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
       __end_of_bitClear 0E36         __end_of_bitValue 0E04         __end_of_bitWrite 0DA0  
           vfprintf@cfmt 0056                ??___aodiv 0011                ??___aomod 0011  
                 _bitSet 0E36                   clear_0 0E0A                ??_bitRead 0002  
                 isa$std 000001                   _printf 0DA0                   pad@buf 0013  
                 dtoa@fp 001C                   _strlen 0D34                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 0CB0  
             __accesstop 0060  __end_of__initialization 0E10            ___rparam_used 000001  
         __pcstackCOMRAM 0001           bitWrite@number 0008            __end_of_fputc 0BE8  
          __end_of_fputs 0CF4            __end_of_putch 0E4E                  ??_fputc 0005  
                ??_fputs 000E                  ??_putch 0001               __pbssBANK0 0060  
                ?_bitSet 0004                  ?_printf 0058                  ?_strlen 0001  
          bitRead@number 0004                ?_bitClear 0004                ?_bitValue 0001  
     __size_of_vfpfcnvrt 01B4                ?_bitWrite 0008                  __Hparam 0000  
                __Lparam 0000           bitClear@number 0004                  ___aodiv 07A0  
                ___aomod 0928          __size_of_bitSet 0016                ?_vfprintf 0050  
           __psmallconst 0300                  _bitRead 0DC6                  __pcinit 0E04  
                __ramtop 0300                  __ptext0 0BE8                  __ptext1 0DA0  
                __ptext2 0C4E                  __ptext3 05EC                  __ptext4 030A  
                __ptext5 0A8C                  __ptext6 0D34                  __ptext7 0CB0  
                __ptext8 0B52                  __ptext9 0E4C          __size_of_printf 0026  
        __size_of_strlen 0036             __size_of_abs 0040             __size_of_pad 00C6  
             ??_bitClear 0007                  bitSet@b 0006               ??_bitValue 0001  
             ??_bitWrite 000C     end_of_initialization 0E10                  fputc@fp 0003  
                fputs@fp 000C        __end_of_vfpfcnvrt 07A0                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 0056                  strlen@a 0003                  strlen@s 0001  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048  
         __end_of_bitSet 0E4C           __end_of_printf 0DC6           __end_of_strlen 0D6A  
    start_initialization 0E04              __end_of_abs 0D34              __end_of_pad 0B52  
            vfprintf@fmt 0052                 ??_bitSet 0007                 ??_printf 005C  
               ??_strlen 0003            __pcstackBANK0 0088         ___aodiv@dividend 0001  
      __size_of_bitClear 0018        __size_of_bitValue 001E        __size_of_bitWrite 0036  
               ?___aodiv 0001                 ?___aomod 0001         ___aodiv@quotient 0013  
               ?_bitRead 0001        __size_of_vfprintf 0062              __smallconst 0300  
              bitClear@b 0006           __size_of_fputc 0096           __size_of_fputs 0044  
         __size_of_putch 0002             bitSet@number 0004                bitValue@b 0003  
              bitWrite@b 000A                _vfpfcnvrt 05EC                 __Hrparam 0000  
             vfprintf@ap 0054                 __Lrparam 0000               vfprintf@fp 0050  
           __Lsmallconst 0300         __size_of___aodiv 0188         __size_of___aomod 0164  
             ?_vfpfcnvrt 0040          ___aodiv@divisor 0009         __size_of_bitRead 0020  
        ___aodiv@counter 0011                 _bitClear 0E1E                 _bitValue 0DE6  
               _dtoa$582 002E                 _bitWrite 0D6A                 __ptext10 0CF4  
               __ptext11 0928                 __ptext12 07A0                 __ptext13 0D6A  
               __ptext14 0E36                 __ptext15 0E1E                 __ptext16 0DE6  
               __ptext17 0DC6            __size_of_main 0066            __size_of_dtoa 02E2  
               bitRead@b 0001                 isa$xinst 000000                 _vfprintf 0C4E  
              printf@fmt 0058                 main@argc 0088                 main@argv 008A  
       ___aomod@dividend 0001              bitWrite@val 000B                 printf@ap 005C  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0046          ___aomod@counter 0011  
           ___aodiv@sign 0012             ___aomod@sign 0012  
